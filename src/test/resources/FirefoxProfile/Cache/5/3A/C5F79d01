
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
    <title>Selenium 2.0 and WebDriver &mdash; Selenium Documentation</title>
    <link href="/seleniumhq.css?20090629" rel="stylesheet" type="text/css"/>
    <link rel="shortcut icon" href="/selenium-favicon.ico" type="image/vnd.microsoft.icon"/>
    <link rel="icon" href="/selenium-favicon.ico" type="image/vnd.microsoft.icon"/>
    <script src="/page-tools.js" type="text/javascript"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="_static/jquery.treeview.css" type="text/css" />
    <link rel="stylesheet" href="_static/docs.css" type="text/css" />
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    '',
        VERSION:     '1.0',
        COLLAPSE_MODINDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  false
      };
    </script>
    <script type="text/javascript" src="_static/jquery.js"></script>
    <script type="text/javascript" src="_static/doctools.js"></script>
    <link rel="shortcut icon" href="_static/selenium-favicon.ico"/>
    <link rel="top" title="Selenium Documentation" href="index.html" />
    <link rel="next" title="WebDriver: Advanced Usage" href="04_webdriver_advanced.html" />
    <link rel="prev" title="Selenium-IDE" href="02_selenium_ide.html" />
<script src="_static/code-snipplets.js" type="text/javascript"></script>
<script src="_static/jquery.scrollTo-1.4.2-min.js" type="text/javascript"></script>
<script src="_static/jquery.localscroll-1.2.7-min.js" type="text/javascript"></script>
<script src="_static/jquery.treeview.pack.js" type="text/javascript"></script>
<script type="text/javascript">
        $(document).ready(function() {
          //This is completely temporary. We're using js to fix the coding issue
          $(".headerlink").html("&para;");
          //Small tests for adding some javascript improvements
          $(".sphinxsidebarwrapper > ul").localScroll({hash:true});
          $(".sphinxsidebarwrapper > ul ul").treeview({
				collapsed: true,
				animated: "true",
		  });
        });
</script>
</head>
<body  class="sectionDocumentation">
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-7221039-1");
pageTracker._trackPageview();
} catch(err) {}</script>
<div id="container">
<div id="header">
    <h1><a href="/" title="Return to Selenium home page">Selenium</a></h1>
    <ul>
        <li id="menu_about"><a href="/about/" title="Overview of Selenium">About</a></li>
        <li id="menu_support"><a href="/support/" title="Get help with Selenium">Support</a></li>
        <li id="menu_documentation"><a href="/documentation/"
                                       title="Technical references and guides">Documentation</a></li>
        <li id="menu_download"><a href="/download/" title="Get Selenium">Download</a></li>
        <li id="menu_projects"><a href="/projects/" title="Selenium Projects">Projects</a></li>
    </ul>
    <form id="searchbox_016909259827549404702:hzru01fldsm" action="http://www.google.com/cse"
          title="seleniumhq.org Selenium Search">
        <div>
            <label for="q" title="Search SeleniumHQ.org's sites for selenium content">search selenium:</label>
            <input type="hidden" name="cx" value="005991058577830013072:2lr_j6t3fko">
            <input type="hidden" name="cof" value="FORID:">
            <input type="text" id="q" name="q" accesskey="s" size="30">
            <input type="submit" id="submit" value="Go">
        </div>
    </form>

</div>
<div id="mBody">
    

    <div id="side" class="left">
        
    <div class="related">
      <h3>Navigation</h3>
      <ul>
        <li><a href="index.html">Selenium Documentation</a> &raquo;</li>
        <li class="right" style="margin-right: 10px">
          <a href="04_webdriver_advanced.html" title="WebDriver: Advanced Usage"
             >next</a></li>
        <li class="right" >
          <a href="02_selenium_ide.html" title="Selenium-IDE"
             >previous</a> |</li> 
      </ul>
    </div>


        
      <div class="sphinxsidebar">
        <div class="sphinxsidebarwrapper">
            <h3>Table Of Contents</h3>
            <ul>
<li><a class="reference external" href="">Selenium 2.0 and WebDriver</a><ul>
<li><a class="reference external" href="#selenium-2-0-features">Selenium 2.0 Features</a></li>
<li><a class="reference external" href="#the-selenium-server-when-to-use-it">The Selenium Server &#8211; When to Use It</a></li>
<li><a class="reference external" href="#setting-up-a-selenium-webdriver-project">Setting Up a Selenium-WebDriver Project</a><ul>
<li><a class="reference external" href="#java">Java</a></li>
<li><a class="reference external" href="#c">C#</a></li>
<li><a class="reference external" href="#python">Python</a></li>
<li><a class="reference external" href="#ruby">Ruby</a></li>
<li><a class="reference external" href="#perl">Perl</a></li>
<li><a class="reference external" href="#php">PHP</a></li>
</ul>
</li>
<li><a class="reference external" href="#migrating-from-selenium-1-0">Migrating from Selenium 1.0</a></li>
<li><a class="reference external" href="#getting-started-with-selenium-webdriver">Getting Started With Selenium-WebDriver</a></li>
<li><a class="reference external" href="#introducing-webdriver-s-drivers">Introducing WebDriver&#8217;s Drivers</a><ul>
<li><a class="reference external" href="#htmlunit-driver">HtmlUnit Driver</a><ul>
<li><a class="reference external" href="#usage">Usage</a></li>
<li><a class="reference external" href="#pros">Pros</a></li>
<li><a class="reference external" href="#cons">Cons</a></li>
<li><a class="reference external" href="#javascript-in-the-htmlunit-driver">JavaScript in the HtmlUnit Driver</a></li>
<li><a class="reference external" href="#enabling-javascript">Enabling JavaScript</a></li>
</ul>
</li>
<li><a class="reference external" href="#firefox-driver">Firefox Driver</a><ul>
<li><a class="reference external" href="#id1">Usage</a></li>
<li><a class="reference external" href="#id2">Pros</a></li>
<li><a class="reference external" href="#id3">Cons</a></li>
<li><a class="reference external" href="#modifying-the-firefox-profile">Modifying the Firefox Profile</a></li>
<li><a class="reference external" href="#info">Info</a></li>
</ul>
</li>
<li><a class="reference external" href="#internet-explorer-driver">Internet Explorer Driver</a><ul>
<li><a class="reference external" href="#id4">Usage</a></li>
<li><a class="reference external" href="#id5">Pros</a></li>
<li><a class="reference external" href="#id6">Cons</a></li>
<li><a class="reference external" href="#id7">Info</a></li>
</ul>
</li>
<li><a class="reference external" href="#chrome-driver">Chrome Driver</a><ul>
<li><a class="reference external" href="#id8">Usage</a></li>
<li><a class="reference external" href="#id9">Pros</a></li>
<li><a class="reference external" href="#id10">Cons</a></li>
<li><a class="reference external" href="#id11">Info</a></li>
<li><a class="reference external" href="#getting-running-with-chrome-driver">Getting running with Chrome Driver</a></li>
</ul>
</li>
<li><a class="reference external" href="#opera-driver">Opera Driver</a></li>
<li><a class="reference external" href="#iphone-driver">iPhone Driver</a></li>
<li><a class="reference external" href="#android-driver">Android Driver</a></li>
</ul>
</li>
<li><a class="reference external" href="#commands-and-operation">Commands and Operation</a><ul>
<li><a class="reference external" href="#fetching-a-page">Fetching a Page</a></li>
<li><a class="reference external" href="#locating-ui-elements-webelements">Locating UI Elements (WebElements)</a><ul>
<li><a class="reference external" href="#by-id">By ID</a></li>
<li><a class="reference external" href="#by-class-name">By Class Name</a></li>
<li><a class="reference external" href="#by-tag-name">By Tag Name</a></li>
<li><a class="reference external" href="#by-name">By Name</a></li>
<li><a class="reference external" href="#by-link-text">By Link Text</a></li>
<li><a class="reference external" href="#by-partial-link-text">By Partial Link Text</a></li>
<li><a class="reference external" href="#by-css">By CSS</a></li>
<li><a class="reference external" href="#by-xpath">By XPATH</a></li>
<li><a class="reference external" href="#using-javascript">Using JavaScript</a></li>
</ul>
</li>
<li><a class="reference external" href="#user-input-filling-in-forms">User Input - Filling In Forms</a></li>
<li><a class="reference external" href="#moving-between-windows-and-frames">Moving Between Windows and Frames</a></li>
<li><a class="reference external" href="#popup-dialogs">Popup Dialogs</a></li>
<li><a class="reference external" href="#navigation-history-and-location">Navigation: History and Location</a></li>
<li><a class="reference external" href="#cookies">Cookies</a></li>
<li><a class="reference external" href="#changing-the-user-agent">Changing the User Agent</a></li>
<li><a class="reference external" href="#drag-and-drop">Drag And Drop</a></li>
</ul>
</li>
<li><a class="reference external" href="#driver-specifics-and-tradeoffs">Driver Specifics and Tradeoffs</a></li>
<li><a class="reference external" href="#webdriver-backed-selenium-rc">WebDriver-Backed Selenium-RC</a><ul>
<li><a class="reference external" href="#id12">Pros</a></li>
<li><a class="reference external" href="#id13">Cons</a></li>
<li><a class="reference external" href="#backing-webdriver-with-selenium">Backing WebDriver with Selenium</a></li>
</ul>
</li>
<li><a class="reference external" href="#selenium-webdriver-wiki">Selenium WebDriver Wiki</a></li>
<li><a class="reference external" href="#next-steps">Next Steps</a></li>
</ul>
</li>
</ul>

            <h4>Previous topic</h4>
            <p class="topless"><a href="02_selenium_ide.html"
                                  title="previous chapter">Selenium-IDE</a></p>
            <h4>Next topic</h4>
            <p class="topless"><a href="04_webdriver_advanced.html"
                                  title="next chapter">WebDriver: Advanced Usage</a></p>
        </div>
      </div>


        <div class="ads">
            <script type="text/javascript"><!--
            google_ad_client = "ca-pub-5440279806572486";
            /* 160x600, created 7/31/08 */
            google_ad_slot = "1904863682";
            google_ad_width = 160;
            google_ad_height = 600; //--> </script>
            <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
        </div>
    </div>
    

    <div id="mainContent">
        <div id="codeLanguagePreference">
      <h4>Programming Language Preference</h4>
      <ul>
        <li><input type="image" value="java" src="/images/icons/java.png" /></li>
        <li><input type="image" value="csharp" src="/images/icons/csharp.png" /></li>
        <li><input type="image" value="python" src="/images/icons/python.png" /></li>
        <li><input type="image" value="ruby" src="/images/icons/ruby.png" /></li>
        <li><input type="image" value="php" src="/images/icons/php.png" /></li>
        <li><input type="image" value="perl" src="/images/icons/perl.png" /></li>
      </ul>
      <div class="clear"></div>
    </div>

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body">
            
  <div class="section" id="selenium-2-0-and-webdriver">
<h1>Selenium 2.0 and WebDriver<a class="headerlink" href="#selenium-2-0-and-webdriver" title="Permalink to this headline">??</a></h1>
<p id="chapter03-reference"><em>NOTE: We&#8217;re currently working on documenting these sections.
We believe the information here is accurate, however be aware we are also still working on this
chapter.  Additional information will be provided as we go which should make this chapter more
solid.</em></p>
<div class="section" id="selenium-2-0-features">
<h2>Selenium 2.0 Features<a class="headerlink" href="#selenium-2-0-features" title="Permalink to this headline">??</a></h2>
<p>Selenium 2.0 has many new exciting features and improvements over Selenium 1.  These new features are
introduced release in the release announcement in the Official Selenium <a class="reference external" href="http://seleniumhq.wordpress.com">Blog</a>.</p>
<p>The primary new feature is the integration of the WebDriver API.
This addresses a number of limitations along with providing an alternative, and simpler,
programming interface.  The goal is to develop an object-oriented API that
provides additional support for a larger number of browsers along with improved
support for modern advanced web-app testing problems.</p>
<p><em>NOTE:  We will add a description of SEL 2.0 new features&#8211;for now we refer readers to
the release announcement.</em></p>
</div>
<div class="section" id="the-selenium-server-when-to-use-it">
<h2>The Selenium Server &#8211; When to Use It<a class="headerlink" href="#the-selenium-server-when-to-use-it" title="Permalink to this headline">??</a></h2>
<p>You may, or may not, need the Selenium Server, depending on how you intend to use Selenium.  If
you will be strictly using the WebDriver API you do not necessarily need the Selenium Server.
Selenium-WebDriver makes direct calls to the browser using each browser&#8217;s native support for automation.
How these direct calls are made, depends on the browser you are using. See the information for each
browser implementation below.</p>
<dl class="docutils">
<dt>Some reason why you will need the Selenium-Server -</dt>
<dd><ul class="first last simple">
<li>You are using Selenium-Grid to distribute your tests over many machines / VMs.</li>
<li>You want to connect to a remote machine that has a particular browser version that is not on
your current machine.</li>
<li>You are not using the Java bindings and would like to use <a class="reference internal" href="#htmlunit-driver">HtmlUnit Driver</a></li>
</ul>
</dd>
</dl>
</div>
<div class="section" id="setting-up-a-selenium-webdriver-project">
<span id="setting-up-webdriver-project"></span><h2>Setting Up a Selenium-WebDriver Project<a class="headerlink" href="#setting-up-a-selenium-webdriver-project" title="Permalink to this headline">??</a></h2>
<p>To install Selenium means to set up a project in a development so you can write a program using
Selenium.  How you do this depends on your programming language and your development environment.</p>
<div class="section" id="java">
<h3>Java<a class="headerlink" href="#java" title="Permalink to this headline">??</a></h3>
<p>The easiest way to set up a Selenium 2.0 Java project is to use Maven.  Maven will download the
java bindings (the Selenium 2.0 java client library) and all its dependencies, and will create the
project for you, using a maven pom.xml (project configuration) file.  Once you&#8217;ve done this, you
can import the maven project into your preferred IDE, IntelliJ IDEA or Eclipse.</p>
<p>First, create a folder to contain your Selenium project files.  Then, to use Maven, you need a
pom.xml file.  This can be created with a text editor.  We won&#8217;t teach the
details of pom.xml files or for using Maven since there are already excellent references on this.
Your pom.xml file will look something like this.  Create this file in the folder you created for
your project.</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span>
                 <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
                 <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>MySel20Proj<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>MySel20Proj<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;dependencies&gt;</span>
            <span class="nt">&lt;dependency&gt;</span>
                <span class="nt">&lt;groupId&gt;</span>org.seleniumhq.selenium<span class="nt">&lt;/groupId&gt;</span>
                <span class="nt">&lt;artifactId&gt;</span>selenium-java<span class="nt">&lt;/artifactId&gt;</span>
                <span class="nt">&lt;version&gt;</span>2.16.1<span class="nt">&lt;/version&gt;</span>
            <span class="nt">&lt;/dependency&gt;</span>
        <span class="nt">&lt;/dependencies&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</pre></div>
</div>
<p>Be sure you specify the most current version.  At the time of writing, the version listed above was
the most current, however there were frequent releases immediately after the release of Selenium 2.0.
Check the <a class="reference external" href="http://seleniumhq.org/download/maven.html">Maven download page</a> for the current release and edit the above dependency accordingly.</p>
<p>Now, from a command-line, CD into the project directory and run maven as follows.</p>
<div class="highlight-bash"><div class="highlight"><pre>mvn clean install
</pre></div>
</div>
<p>This will download Selenium and all its dependencies and will add them to the project.</p>
<p>Finally, import the project into your preferred development environment.  For those not familiar
with this, we&#8217;ve provided an appendix which shows this.</p>
<p><a class="reference external" href="appendix_installing_java_driver_Sel20_via_maven.html#importing-maven-into-intellij-reference"><em>Importing a maven project into IntelliJ IDEA</em></a>.
<a class="reference external" href="appendix_installing_java_driver_Sel20_via_maven.html#importing-maven-into-eclipse-reference"><em>Importing a maven project into Eclipse</em></a>.</p>
</div>
<div class="section" id="c">
<h3>C#<a class="headerlink" href="#c" title="Permalink to this headline">??</a></h3>
<p>As of Selenium 2.2.0, the C# bindings are distributed as a set of signed dlls along with other
dependency dlls. Prior to 2.2.0, all Selenium dll&#8217;s were unsigned.
To include Selenium in your project, simply download the latest
selenium-dotnet zip file from <a class="reference external" href="https://code.google.com/p/selenium/downloads/list">https://code.google.com/p/selenium/downloads/list</a>.
If you are using Windows Vista or above, you should unblock the zip file before
unzipping it: Right click on the zip file, click &#8220;Properties&#8221;, click &#8220;Unblock&#8221;
and click &#8220;OK&#8221;.</p>
<p>Unzip the contents of the zip file, and add a reference to each of the unzipped
dlls to your project in Visual Studio (or your IDE of choice).</p>
<p>Official NuGet Packages:
<a class="reference external" href="http://www.nuget.org/List/Packages/Selenium.RC">RC</a>
<a class="reference external" href="http://www.nuget.org/List/Packages/Selenium.WebDriver">WebDriver</a>
<a class="reference external" href="http://www.nuget.org/List/Packages/Selenium.WebDriverBackedSelenium">WebDriverBackedSelenium</a>
<a class="reference external" href="http://www.nuget.org/List/Packages/Selenium.Support">Support</a></p>
</div>
<div class="section" id="python">
<h3>Python<a class="headerlink" href="#python" title="Permalink to this headline">??</a></h3>
<p>If you are using Python for test automation then you probably are already familiar with developing
in Python.  To add Selenium to your Python environment run the following command from
a command-line.</p>
<div class="highlight-bash"><div class="highlight"><pre>pip install selenium
</pre></div>
</div>
<p>Pip requires <a class="reference external" href="http://pypi.python.org/pypi/pip">pip</a> to be installed, pip also has a dependency
on <a class="reference external" href="http://pypi.python.org/pypi/setuptools">setuptools</a>.</p>
<p>Teaching Python development itself is beyond the scope of this document, however there are many
resources on Python and likely developers in your organization can help you get up to speed.</p>
</div>
<div class="section" id="ruby">
<h3>Ruby<a class="headerlink" href="#ruby" title="Permalink to this headline">??</a></h3>
<p>If you are using Ruby for test automation then you probably are already familiar with developing
in Ruby.  To add Selenium to your Ruby environment run the following command from
a command-line.</p>
<div class="highlight-bash"><div class="highlight"><pre>gem install selenium-webdriver
</pre></div>
</div>
<p>Teaching Ruby development itself is beyond the scope of this document, however there are many
resources on Ruby and likely developers in your organization can help you get up to speed.</p>
</div>
<div class="section" id="perl">
<h3>Perl<a class="headerlink" href="#perl" title="Permalink to this headline">??</a></h3>
<p>Perl bindings are provided by a third party, please refer to any of their documentation on how to
install / get started. There is one known <a class="reference external" href="https://metacpan.org/module/Selenium::Remote::Driver">Perl binding</a> as of this writing.</p>
</div>
<div class="section" id="php">
<h3>PHP<a class="headerlink" href="#php" title="Permalink to this headline">??</a></h3>
<p>PHP bindings are provided by a third party, please refer to any of their documentation on how to
install / get started. There are three known bindings at this time: <a class="reference external" href="https://github.com/chibimagic/WebDriver-PHP/">By Chibimagic</a>
<a class="reference external" href="http://code.google.com/p/php-webdriver-bindings/">By Lukasz Kolczynski</a> and <a class="reference external" href="https://github.com/facebook/php-webdriver">By the Facebook</a></p>
</div>
</div>
<div class="section" id="migrating-from-selenium-1-0">
<h2>Migrating from Selenium 1.0<a class="headerlink" href="#migrating-from-selenium-1-0" title="Permalink to this headline">??</a></h2>
<p>For those who already have test suites written using Selenium 1.0, we have provided tips on how to
migrate your existing code to Selenium 2.0.  Simon Stewart, the lead developer for Selenium 2.0,
has written an article on migrating from Selenium 1.0.  We&#8217;ve included this as an appendix.</p>
<p><a class="reference external" href="appendix_migrating_from_rc_to_webdriver.html#migrating-to-webdriver-reference"><em>Migrating From Selenium RC to Selenium WebDriver</em></a></p>
</div>
<div class="section" id="getting-started-with-selenium-webdriver">
<h2>Getting Started With Selenium-WebDriver<a class="headerlink" href="#getting-started-with-selenium-webdriver" title="Permalink to this headline">??</a></h2>
<p>WebDriver is a tool for automating web application testing, and in particular
to verify that they work as expected. It aims to provide a friendly API that&#8217;s
easy to explore and understand, easier to use than the Selenium-RC (1.0) API,
which will help to make your tests easier to
read and maintain. It&#8217;s not tied to any particular test framework, so it can
be used equally well in a unit testing or from a plain old &#8220;main&#8221; method.
This section introduces WebDriver&#8217;s API and helps get you started becoming
familiar with it.  Start by setting up a WebDriver project if you haven&#8217;t already.
This was described in the previous section, <a class="reference internal" href="#setting-up-webdriver-project"><em>Setting Up a Selenium-WebDriver Project</em></a>.</p>
<p>Once your project is set up, you can see that WebDriver acts just as any normal library:
it is entirely self-contained, and you usually don&#8217;t need to remember to start any
additional processes or run any installers before using it, as opposed to the proxy server
with Selenium-RC.</p>
<p>Note: additional steps are required to use <a class="reference internal" href="#chrome-driver">Chrome Driver</a>, <a class="reference internal" href="#opera-driver">Opera Driver</a>, <a class="reference internal" href="#android-driver">Android Driver</a>
and <a class="reference internal" href="#iphone-driver">iPhone Driver</a></p>
<p>You&#8217;re now ready to write some code. An easy way to get started is this
example, which searches for the term &#8220;Cheese&#8221; on Google and then outputs the
result page&#8217;s title to the console.</p>
<div class="highlight-java"><div class="highlight"><pre><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">openqa</span><span class="o">.</span><span class="na">selenium</span><span class="o">.</span><span class="na">example</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.openqa.selenium.By</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.WebDriver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.WebElement</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.firefox.FirefoxDriver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.support.ui.ExpectedCondition</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.support.ui.WebDriverWait</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Selenium2Example</span>  <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c">// Create a new instance of the Firefox driver</span>
        <span class="c">// Notice that the remainder of the code relies on the interface, </span>
        <span class="c">// not the implementation.</span>
        <span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="o">();</span>

        <span class="c">// And now use this to visit Google</span>
        <span class="n">driver</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;http://www.google.com&quot;</span><span class="o">);</span>
        <span class="c">// Alternatively the same thing can be done like this</span>
        <span class="c">// driver.navigate().to(&quot;http://www.google.com&quot;);</span>

        <span class="c">// Find the text input element by its name</span>
        <span class="n">WebElement</span> <span class="n">element</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="s">&quot;q&quot;</span><span class="o">));</span>

        <span class="c">// Enter something to search for</span>
        <span class="n">element</span><span class="o">.</span><span class="na">sendKeys</span><span class="o">(</span><span class="s">&quot;Cheese!&quot;</span><span class="o">);</span>

        <span class="c">// Now submit the form. WebDriver will find the form for us from the element</span>
        <span class="n">element</span><span class="o">.</span><span class="na">submit</span><span class="o">();</span>

        <span class="c">// Check the title of the page</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Page title is: &quot;</span> <span class="o">+</span> <span class="n">driver</span><span class="o">.</span><span class="na">getTitle</span><span class="o">());</span>
        
        <span class="c">// Google&#39;s search is rendered dynamically with JavaScript.</span>
        <span class="c">// Wait for the page to load, timeout after 10 seconds</span>
        <span class="o">(</span><span class="k">new</span> <span class="n">WebDriverWait</span><span class="o">(</span><span class="n">driver</span><span class="o">,</span> <span class="mi">10</span><span class="o">)).</span><span class="na">until</span><span class="o">(</span><span class="k">new</span> <span class="n">ExpectedCondition</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;()</span> <span class="o">{</span>
            <span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="n">WebDriver</span> <span class="n">d</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">d</span><span class="o">.</span><span class="na">getTitle</span><span class="o">().</span><span class="na">toLowerCase</span><span class="o">().</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;cheese!&quot;</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>

        <span class="c">// Should see: &quot;cheese! - Google Search&quot;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Page title is: &quot;</span> <span class="o">+</span> <span class="n">driver</span><span class="o">.</span><span class="na">getTitle</span><span class="o">());</span>
        
        <span class="c">//Close the browser</span>
        <span class="n">driver</span><span class="o">.</span><span class="na">quit</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
<div class="highlight-csharp"><div class="highlight"><pre><span class="k">using</span> <span class="nn">OpenQA.Selenium.Firefox</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">OpenQA.Selenium</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">GoogleSuggest</span>
<span class="k">{</span>

    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="n">IWebDriver</span> <span class="n">driver</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="p">();</span>

        <span class="c">//Notice navigation is slightly different than the Java version</span>
        <span class="c">//This is because &#39;get&#39; is a keyword in C#</span>
        <span class="n">driver</span><span class="p">.</span><span class="n">Navigate</span><span class="p">().</span><span class="n">GoToUrl</span><span class="p">(</span><span class="s">&quot;http://www.google.com/&quot;</span><span class="p">);</span>
        <span class="n">IWebElement</span> <span class="n">query</span> <span class="p">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">FindElement</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">Name</span><span class="p">(</span><span class="s">&quot;q&quot;</span><span class="p">));</span>
        <span class="n">query</span><span class="p">.</span><span class="n">SendKeys</span><span class="p">(</span><span class="s">&quot;Cheese&quot;</span><span class="p">);</span>
        <span class="n">System</span><span class="p">.</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Page title is: &quot;</span> <span class="p">+</span> <span class="n">driver</span><span class="p">.</span><span class="n">Title</span><span class="p">);</span>
        <span class="c">// TODO add wait</span>
        <span class="n">driver</span><span class="p">.</span><span class="n">Quit</span><span class="p">();</span>
    <span class="k">}</span>

<span class="k">}</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">selenium</span> <span class="kn">import</span> <span class="n">webdriver</span>
<span class="kn">from</span> <span class="nn">selenium.common.exceptions</span> <span class="kn">import</span> <span class="n">TimeoutException</span>
<span class="kn">from</span> <span class="nn">selenium.webdriver.support.ui</span> <span class="kn">import</span> <span class="n">WebDriverWait</span> <span class="c"># available since 2.4.0</span>
<span class="kn">import</span> <span class="nn">time</span>

<span class="c"># Create a new instance of the Firefox driver</span>
<span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">Firefox</span><span class="p">()</span>

<span class="c"># go to the google home page</span>
<span class="n">driver</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;http://www.google.com&quot;</span><span class="p">)</span>

<span class="c"># find the element that&#39;s name attribute is q (the google search box)</span>
<span class="n">inputElement</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s">&quot;q&quot;</span><span class="p">)</span>

<span class="c"># type in the search</span>
<span class="n">inputElement</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="s">&quot;Cheese!&quot;</span><span class="p">)</span>

<span class="c"># submit the form (although google automatically searches now without submitting)</span>
<span class="n">inputElement</span><span class="o">.</span><span class="n">submit</span><span class="p">()</span>

<span class="c"># the page is ajaxy so the title is originally this:</span>
<span class="k">print</span> <span class="n">driver</span><span class="o">.</span><span class="n">title</span>

<span class="k">try</span><span class="p">:</span>
    <span class="c"># we have to wait for the page to refresh, the last thing that seems to be updated is the title</span>
    <span class="n">WebDriverWait</span><span class="p">(</span><span class="n">driver</span><span class="p">,</span> <span class="mf">10</span><span class="p">)</span><span class="o">.</span><span class="n">until</span><span class="p">(</span><span class="k">lambda</span> <span class="n">driver</span> <span class="p">:</span> <span class="n">driver</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&quot;cheese!&quot;</span><span class="p">))</span>

    <span class="c"># You should see &quot;cheese! - Google Search&quot;</span>
    <span class="k">print</span> <span class="n">driver</span><span class="o">.</span><span class="n">title</span>

<span class="k">finally</span><span class="p">:</span>
    <span class="n">driver</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
</pre></div>
</div>
<div class="highlight-ruby"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;selenium-webdriver&#39;</span>

<span class="n">driver</span> <span class="o">=</span> <span class="no">Selenium</span><span class="o">::</span><span class="no">WebDriver</span><span class="o">.</span><span class="n">for</span> <span class="ss">:firefox</span>
<span class="n">driver</span><span class="o">.</span><span class="n">get</span> <span class="s2">&quot;http://google.com&quot;</span>

<span class="n">element</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;q&quot;</span>
<span class="n">element</span><span class="o">.</span><span class="n">send_keys</span> <span class="s2">&quot;Cheese!&quot;</span>
<span class="n">element</span><span class="o">.</span><span class="n">submit</span>

<span class="nb">puts</span> <span class="s2">&quot;Page title is </span><span class="si">#{</span><span class="n">driver</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2">&quot;</span>

<span class="n">wait</span> <span class="o">=</span> <span class="no">Selenium</span><span class="o">::</span><span class="no">WebDriver</span><span class="o">::</span><span class="no">Wait</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:timeout</span> <span class="o">=&gt;</span> <span class="mi">10</span><span class="p">)</span>
<span class="n">wait</span><span class="o">.</span><span class="n">until</span> <span class="p">{</span> <span class="n">driver</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">start_with?</span> <span class="s2">&quot;cheese!&quot;</span> <span class="p">}</span>

<span class="nb">puts</span> <span class="s2">&quot;Page title is </span><span class="si">#{</span><span class="n">driver</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="n">driver</span><span class="o">.</span><span class="n">quit</span>
</pre></div>
</div>
<p>In upcoming sections, you will learn more about how to use WebDriver for things
such as navigating forward and backward in your browser&#8217;s history, and how to
test web sites that use frames and windows. We also provide a more
thorough discussions and examples.</p>
</div>
<div class="section" id="introducing-webdriver-s-drivers">
<h2>Introducing WebDriver&#8217;s Drivers<a class="headerlink" href="#introducing-webdriver-s-drivers" title="Permalink to this headline">??</a></h2>
<p>WebDriver is the name of the key interface against which tests should be
written, but there are several implementations. These include:</p>
<div class="section" id="htmlunit-driver">
<h3>HtmlUnit Driver<a class="headerlink" href="#htmlunit-driver" title="Permalink to this headline">??</a></h3>
<p>This is currently the fastest and most lightweight implementation of WebDriver.
As the name suggests, this is based on HtmlUnit. HtmlUnit is a java based implementation
of a WebBrowser without a GUI. For any language binding (other than java) the
Selenium Server is required to use this driver.</p>
<div class="section" id="usage">
<h4>Usage<a class="headerlink" href="#usage" title="Permalink to this headline">??</a></h4>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HtmlUnitDriver</span><span class="o">();</span>
</pre></div>
</div>
<div class="highlight-csharp"><div class="highlight"><pre><span class="n">IWebDriver</span> <span class="n">driver</span> <span class="p">=</span> <span class="k">new</span> <span class="n">RemoteWebDriver</span><span class="p">(</span><span class="k">new</span> <span class="n">Uri</span><span class="p">(</span><span class="s">&quot;http://127.0.0.1:4444/wd/hub&quot;</span><span class="p">),</span>
                                        <span class="n">DesiredCapabilities</span><span class="p">.</span><span class="n">HtmlUnit</span><span class="p">());</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">Remote</span><span class="p">(</span><span class="s">&quot;http://localhost:4444/wd/hub&quot;</span><span class="p">,</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">DesiredCapabilities</span><span class="o">.</span><span class="n">HTMLUNIT</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-ruby"><div class="highlight"><pre><span class="n">driver</span> <span class="o">=</span> <span class="no">Selenium</span><span class="o">::</span><span class="no">WebDriver</span><span class="o">.</span><span class="n">for</span> <span class="ss">:remote</span><span class="p">,</span> <span class="ss">:url</span> <span class="o">=&gt;</span> <span class="s2">&quot;http://localhost:4444/wd/hub&quot;</span><span class="p">,</span> <span class="ss">:desired_capabilities</span> <span class="o">=&gt;</span> <span class="ss">:htmlunit</span>
</pre></div>
</div>
</div>
<div class="section" id="pros">
<h4>Pros<a class="headerlink" href="#pros" title="Permalink to this headline">??</a></h4>
<ul class="simple">
<li>Fastest implementation of WebDriver</li>
<li>A pure Java solution and so it is platform independent.</li>
<li>Supports JavaScript</li>
</ul>
</div>
<div class="section" id="cons">
<h4>Cons<a class="headerlink" href="#cons" title="Permalink to this headline">??</a></h4>
<ul class="simple">
<li>Emulates other browsers&#8217; JavaScript behaviour (see below)</li>
</ul>
</div>
<div class="section" id="javascript-in-the-htmlunit-driver">
<h4>JavaScript in the HtmlUnit Driver<a class="headerlink" href="#javascript-in-the-htmlunit-driver" title="Permalink to this headline">??</a></h4>
<p>None of the popular browsers uses the JavaScript engine used by HtmlUnit
(Rhino). If you test JavaScript using HtmlUnit the results may differ
significantly from those browsers.</p>
<p>When we say &#8220;JavaScript&#8221; we actually mean &#8220;JavaScript and the DOM&#8221;. Although
the DOM is defined by the W3C each browser has its own quirks and differences
in their implementation of the DOM and in how JavaScript interacts with it.
HtmlUnit has an impressively complete implementation of the DOM and has good
support for using JavaScript, but it is no different from any other
browser: it has its own quirks and differences from both the W3C standard and
the DOM implementations of the major browsers, despite its ability to mimic
other browsers.</p>
<p>With WebDriver, we had to make a choice; do we enable HtmlUnit&#8217;s JavaScript
capabilities and run the risk of teams running into problems that only manifest
themselves there, or do we leave JavaScript disabled, knowing that there are
more and more sites that rely on JavaScript? We took the conservative approach,
and by default have disabled support when we use HtmlUnit. With each release of
both WebDriver and HtmlUnit, we reassess this decision: we hope to enable
JavaScript by default on the HtmlUnit at some point.</p>
</div>
<div class="section" id="enabling-javascript">
<h4>Enabling JavaScript<a class="headerlink" href="#enabling-javascript" title="Permalink to this headline">??</a></h4>
<p>If you can&#8217;t wait, enabling JavaScript support is very easy:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">HtmlUnitDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HtmlUnitDriver</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</pre></div>
</div>
<div class="highlight-csharp"><div class="highlight"><pre><span class="n">WebDriver</span> <span class="n">driver</span> <span class="p">=</span> <span class="k">new</span> <span class="n">RemoteWebDriver</span><span class="p">(</span><span class="k">new</span> <span class="n">Uri</span><span class="p">(</span><span class="s">&quot;http://127.0.0.1:4444/wd/hub&quot;</span><span class="p">),</span>
                       <span class="n">DesiredCapabilities</span><span class="p">.</span><span class="n">HtmlUnitWithJavaScript</span><span class="p">());</span>
</pre></div>
</div>
<div class="highlight-ruby"><div class="highlight"><pre><span class="n">caps</span> <span class="o">=</span> <span class="no">Selenium</span><span class="o">::</span><span class="no">WebDriver</span><span class="o">::</span><span class="no">Remote</span><span class="o">::</span><span class="no">Capabilities</span><span class="o">.</span><span class="n">htmlunit</span><span class="p">(</span><span class="ss">:javascript_enabled</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span>
<span class="n">driver</span> <span class="o">=</span> <span class="no">Selenium</span><span class="o">::</span><span class="no">WebDriver</span><span class="o">.</span><span class="n">for</span> <span class="ss">:remote</span><span class="p">,</span> <span class="ss">:url</span> <span class="o">=&gt;</span> <span class="s2">&quot;http://localhost:4444/wd/hub&quot;</span><span class="p">,</span> <span class="ss">:desired_capabilities</span> <span class="o">=&gt;</span> <span class="n">caps</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">Remote</span><span class="p">(</span><span class="s">&quot;http://localhost:4444/wd/hub&quot;</span><span class="p">,</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">DesiredCapabilities</span><span class="o">.</span><span class="n">HTMLUNITWITHJS</span><span class="p">)</span>
</pre></div>
</div>
<p>This will cause the HtmlUnit Driver to emulate Firefox 3.6&#8217;s JavaScript
handling by default.</p>
</div>
</div>
<div class="section" id="firefox-driver">
<h3>Firefox Driver<a class="headerlink" href="#firefox-driver" title="Permalink to this headline">??</a></h3>
<p>Controls the <a class="reference external" href="http://getfirefox.com">Firefox</a> browser using a Firefox plugin.
The Firefox Profile that is used is stripped down from what is installed on the
machine to only include the Selenium WebDriver.xpi (plugin). A few settings are
also changed by default (<a class="reference external" href="http://code.google.com/p/selenium/source/browse/trunk/java/client/src/org/openqa/selenium/firefox/FirefoxProfile.java#55">see the source to see which ones</a>)
Firefox Driver is capable of being run and is tested on Windows, Mac, Linux.
Currently on versions 3.0, 3.6, 5, 6, 7, and 8</p>
<div class="section" id="id1">
<h4>Usage<a class="headerlink" href="#id1" title="Permalink to this headline">??</a></h4>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="o">();</span>
</pre></div>
</div>
<div class="highlight-csharp"><div class="highlight"><pre><span class="n">IWebDriver</span> <span class="n">driver</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="p">();</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">Firefox</span><span class="p">()</span>
</pre></div>
</div>
<div class="highlight-ruby"><div class="highlight"><pre><span class="n">driver</span> <span class="o">=</span> <span class="no">Selenium</span><span class="o">::</span><span class="no">WebDriver</span><span class="o">.</span><span class="n">for</span> <span class="ss">:firefox</span>
</pre></div>
</div>
</div>
<div class="section" id="id2">
<h4>Pros<a class="headerlink" href="#id2" title="Permalink to this headline">??</a></h4>
<ul class="simple">
<li>Runs in a real browser and supports JavaScript</li>
<li>Faster than the <a class="reference internal" href="#internet-explorer-driver">Internet Explorer Driver</a></li>
</ul>
</div>
<div class="section" id="id3">
<h4>Cons<a class="headerlink" href="#id3" title="Permalink to this headline">??</a></h4>
<ul class="simple">
<li>Slower than the <a class="reference internal" href="#htmlunit-driver">HtmlUnit Driver</a></li>
</ul>
</div>
<div class="section" id="modifying-the-firefox-profile">
<h4>Modifying the Firefox Profile<a class="headerlink" href="#modifying-the-firefox-profile" title="Permalink to this headline">??</a></h4>
<p>Suppose that you wanted to modify the user agent string (as above), but you&#8217;ve
got a tricked out Firefox profile that contains dozens of useful extensions.
There are two ways to obtain this profile. Assuming that the profile has been
created using Firefox&#8217;s profile manager (<tt class="docutils literal"><span class="pre">firefox</span> <span class="pre">-ProfileManager</span></tt>):</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">ProfileIni</span> <span class="n">allProfiles</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ProfilesIni</span><span class="o">();</span>
<span class="n">FirefoxProfile</span> <span class="n">profile</span> <span class="o">=</span> <span class="n">allProfiles</span><span class="o">.</span><span class="na">getProfile</span><span class="o">(</span><span class="s">&quot;WebDriver&quot;</span><span class="o">);</span>
<span class="n">profile</span><span class="o">.</span><span class="na">setPreferences</span><span class="o">(</span><span class="s">&quot;foo.bar&quot;</span><span class="o">,</span> <span class="mi">23</span><span class="o">);</span>
<span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="o">(</span><span class="n">profile</span><span class="o">);</span>
</pre></div>
</div>
<p>Alternatively, if the profile isn&#8217;t already registered with Firefox:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">File</span> <span class="n">profileDir</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;path/to/top/level/of/profile&quot;</span><span class="o">);</span>
<span class="n">FirefoxProfile</span> <span class="n">profile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxProfile</span><span class="o">(</span><span class="n">profileDir</span><span class="o">);</span>
<span class="n">profile</span><span class="o">.</span><span class="na">addAdditionalPreferences</span><span class="o">(</span><span class="n">extraPrefs</span><span class="o">);</span>
<span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="o">(</span><span class="n">profile</span><span class="o">);</span>
</pre></div>
</div>
<p>As we develop features in the <a class="reference internal" href="#firefox-driver">Firefox Driver</a>, we expose the ability to use them.
For example, until we feel native events are stable on Firefox for Linux, they
are disabled by default. To enable them:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">FirefoxProfile</span> <span class="n">profile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxProfile</span><span class="o">();</span>
<span class="n">profile</span><span class="o">.</span><span class="na">setEnableNativeEvents</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="o">(</span><span class="n">profile</span><span class="o">);</span>
</pre></div>
</div>
</div>
<div class="section" id="info">
<h4>Info<a class="headerlink" href="#info" title="Permalink to this headline">??</a></h4>
<p>See the <a class="reference external" href="http://code.google.com/p/selenium/wiki/FirefoxDriver">Firefox section in the wiki page</a> for the most up to date info.</p>
</div>
</div>
<div class="section" id="internet-explorer-driver">
<h3>Internet Explorer Driver<a class="headerlink" href="#internet-explorer-driver" title="Permalink to this headline">??</a></h3>
<p>This driver is controlled by a .dll and is thus only available on Windows OS.
Each Selenium release has it&#8217;s core functionality tested against versions
6, 7 and 8 on XP, and 9 on Windows7.</p>
<div class="section" id="id4">
<h4>Usage<a class="headerlink" href="#id4" title="Permalink to this headline">??</a></h4>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InternetExplorerDriver</span><span class="o">();</span>
</pre></div>
</div>
<div class="highlight-csharp"><div class="highlight"><pre><span class="n">IWebDriver</span> <span class="n">driver</span> <span class="p">=</span> <span class="k">new</span> <span class="n">InternetExlorerDriver</span><span class="p">();</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">Ie</span><span class="p">()</span>
</pre></div>
</div>
<div class="highlight-ruby"><div class="highlight"><pre><span class="n">driver</span> <span class="o">=</span> <span class="no">Selenium</span><span class="o">::</span><span class="no">WebDriver</span><span class="o">.</span><span class="n">for</span> <span class="ss">:ie</span>
</pre></div>
</div>
</div>
<div class="section" id="id5">
<h4>Pros<a class="headerlink" href="#id5" title="Permalink to this headline">??</a></h4>
<ul class="simple">
<li>Runs in a real browser and supports JavaScript with all the quirks
your end users see.</li>
</ul>
</div>
<div class="section" id="id6">
<h4>Cons<a class="headerlink" href="#id6" title="Permalink to this headline">??</a></h4>
<ul class="simple">
<li>Obviously the <a class="reference internal" href="#internet-explorer-driver">Internet Explorer Driver</a> will only work on Windows!</li>
<li>Comparatively slow (though still pretty snappy :)</li>
<li>XPath is not natively supported in most versions. Sizzle is injected automatically
which is significantly slower than other browsers and slower when comparing to CSS
selectors in the same browser.</li>
<li>CSS is not natively supported in versions 6 and 7. Sizzle is injected instead.</li>
<li>CSS selectors in IE 8 and 9 are native, but those browsers don&#8217;t fully support CSS3</li>
</ul>
</div>
<div class="section" id="id7">
<h4>Info<a class="headerlink" href="#id7" title="Permalink to this headline">??</a></h4>
<p>See the <a class="reference external" href="http://code.google.com/p/selenium/wiki/InternetExplorerDriver">Internet Explorer section of the wiki page</a> for the most up to date info.
Please take special note of the Required Configuration section.</p>
</div>
</div>
<div class="section" id="chrome-driver">
<h3>Chrome Driver<a class="headerlink" href="#chrome-driver" title="Permalink to this headline">??</a></h3>
<p>Chrome Driver is maintained / supported by the <a class="reference external" href="http://code.google.com/p/chromium/">Chromium</a>
project iteslf. WebDriver works with Chrome through the chromedriver binary (found on the chromium
project&#8217;s download page). You need to have both chromedriver and a version of chrome browser installed.
chromedriver needs to be placed somewhere on your system&#8217;s path in order for WebDriver to automatically
discover it. The Chrome browser itself is discovered by chromedriver in the default installation path.
These both can be overridden by environment variables. Please refer to <a class="reference external" href="http://code.google.com/p/selenium/wiki/ChromeDriver">the wiki</a>
for more information.</p>
<div class="section" id="id8">
<h4>Usage<a class="headerlink" href="#id8" title="Permalink to this headline">??</a></h4>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ChromeDriver</span><span class="o">();</span>
</pre></div>
</div>
<div class="highlight-csharp"><div class="highlight"><pre><span class="n">IWebDriver</span> <span class="n">driver</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ChromeDriver</span><span class="p">();</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">Chrome</span><span class="p">()</span>
</pre></div>
</div>
<div class="highlight-ruby"><div class="highlight"><pre><span class="n">driver</span> <span class="o">=</span> <span class="no">Selenium</span><span class="o">::</span><span class="no">WebDriver</span><span class="o">.</span><span class="n">for</span> <span class="ss">:chrome</span>
</pre></div>
</div>
</div>
<div class="section" id="id9">
<h4>Pros<a class="headerlink" href="#id9" title="Permalink to this headline">??</a></h4>
<ul class="simple">
<li>Runs in a real browser and supports JavaScript</li>
<li>Because Chrome is a Webkit-based browser, the <a class="reference internal" href="#chrome-driver">Chrome Driver</a> may allow you to
verify that your site works in Safari. Note that since Chrome uses its own V8
JavaScript engine rather than Safari&#8217;s Nitro engine, JavaScript execution may
differ.</li>
</ul>
</div>
<div class="section" id="id10">
<h4>Cons<a class="headerlink" href="#id10" title="Permalink to this headline">??</a></h4>
<ul class="simple">
<li>Slower than the <a class="reference internal" href="#htmlunit-driver">HtmlUnit Driver</a></li>
</ul>
</div>
<div class="section" id="id11">
<h4>Info<a class="headerlink" href="#id11" title="Permalink to this headline">??</a></h4>
<p><a class="reference external" href="http://code.google.com/p/selenium/wiki/ChromeDriver">See our wiki</a> for the most up to date info.
More info can also be found on the <a class="reference external" href="/download/">downloads page</a></p>
</div>
<div class="section" id="getting-running-with-chrome-driver">
<h4>Getting running with Chrome Driver<a class="headerlink" href="#getting-running-with-chrome-driver" title="Permalink to this headline">??</a></h4>
<p>Download the <a class="reference external" href="http://code.google.com/p/chromium/downloads/list">Chrome Driver executable</a>
and follow the other instructions on the
<a class="reference external" href="http://code.google.com/p/selenium/wiki/ChromeDriver">wiki page</a></p>
</div>
</div>
<div class="section" id="opera-driver">
<span id="seleniumrcemulation"></span><h3>Opera Driver<a class="headerlink" href="#opera-driver" title="Permalink to this headline">??</a></h3>
<p>See the <a class="reference external" href="http://code.google.com/p/selenium/wiki/OperaDriver">Opera Driver wiki article</a> in the
Selenium Wiki for information on using the Opera Driver.</p>
</div>
<div class="section" id="iphone-driver">
<h3>iPhone Driver<a class="headerlink" href="#iphone-driver" title="Permalink to this headline">??</a></h3>
<p>See the <a class="reference external" href="http://code.google.com/p/selenium/wiki/IPhoneDriver">iPhone Driver wiki article</a> in the
Selenium Wiki for information on using the Mac iOS Driver.</p>
</div>
<div class="section" id="android-driver">
<h3>Android Driver<a class="headerlink" href="#android-driver" title="Permalink to this headline">??</a></h3>
<p>See the <a class="reference external" href="http://code.google.com/p/selenium/wiki/AndroidDriver">Android Driver wiki article</a>
in the Selenium Wiki for information on using the Android Driver.</p>
</div>
</div>
<div class="section" id="commands-and-operation">
<h2>Commands and Operation<a class="headerlink" href="#commands-and-operation" title="Permalink to this headline">??</a></h2>
<div class="section" id="fetching-a-page">
<h3>Fetching a Page<a class="headerlink" href="#fetching-a-page" title="Permalink to this headline">??</a></h3>
<p>The first thing you&#8217;re likely to want to do with WebDriver is navigate to a page.
The normal way to do this is by calling &#8220;get&#8221;:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;http://www.google.com&quot;</span><span class="o">);</span>
</pre></div>
</div>
<div class="highlight-csharp"><div class="highlight"><pre><span class="n">driver</span><span class="p">.</span><span class="n">Url</span> <span class="p">=</span> <span class="s">&quot;http://www.google.com&quot;</span><span class="p">;</span>
</pre></div>
</div>
<div class="highlight-ruby"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="n">get</span> <span class="s2">&quot;http://www.google.com&quot;</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;http://www.google.com&quot;</span><span class="p">)</span>
</pre></div>
</div>
<p>Dependent on several factors, including the OS/Browser combination,
WebDriver may or may not wait for the page to load. In some circumstances,
WebDriver may return control before the page has finished, or even started, loading.
To ensure robustness, you need to wait for the element(s) to exist in the page using
<a class="reference external" href="04_webdriver_advanced.html#explicit-and-implicit-waits-reference"><em>Explicit and Implicit Waits</em></a>.</p>
</div>
<div class="section" id="locating-ui-elements-webelements">
<h3>Locating UI Elements (WebElements)<a class="headerlink" href="#locating-ui-elements-webelements" title="Permalink to this headline">??</a></h3>
<p>Locating elements in WebDriver can be done on the WebDriver instance itself or on a WebElement.
Each of the language bindings expose a &#8220;Find Element&#8221; and &#8220;Find Elements&#8221; method. The first returns
a WebElement object otherwise it throws an exception. The latter returns a list of WebElements, it can
return an empty list if no DOM elements match the query.</p>
<p>The &#8220;Find&#8221; methods take a locator or query object called &#8220;By&#8221;. &#8220;By&#8221; strategies are listed below.</p>
<div class="section" id="by-id">
<h4>By ID<a class="headerlink" href="#by-id" title="Permalink to this headline">??</a></h4>
<p>This is the most efficient and preferred way to locate an element. Common pitfalls that UI developers
make is having non-unique id&#8217;s on a page or auto-generating the id, both should be avoided. A class
on an html element is more appropriate than an auto-generated id.</p>
<p>Example of how to find an element that looks like this:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;coolestWidgetEvah&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/div&gt;</span>
</pre></div>
</div>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebElement</span> <span class="n">element</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">id</span><span class="o">(</span><span class="s">&quot;coolestWidgetEvah&quot;</span><span class="o">));</span>
</pre></div>
</div>
<div class="highlight-csharp"><div class="highlight"><pre><span class="n">IWebElement</span> <span class="n">element</span> <span class="p">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">FindElement</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">Id</span><span class="p">(</span><span class="s">&quot;coolestWidgetEvah&quot;</span><span class="p">));</span>
</pre></div>
</div>
<div class="highlight-ruby"><div class="highlight"><pre><span class="n">element</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:id</span><span class="p">,</span> <span class="s2">&quot;coolestWidgetEvah&quot;</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-python"><pre>element = driver.find_element_by_id("coolestWidgetEvah")

or

from selenium.webdriver.common.by import By
element = driver.find_element(by=By.ID, value="coolestWidgetEvah")</pre>
</div>
</div>
<div class="section" id="by-class-name">
<h4>By Class Name<a class="headerlink" href="#by-class-name" title="Permalink to this headline">??</a></h4>
<p>&#8220;Class&#8221; in this case refers to the attribute on the DOM element. Often in practical use there are
many DOM elements with the same class name, thus finding multiple elements becomes the more praticle
option over finding the first element.</p>
<p>Example of how to find an element that looks like this:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;cheese&quot;</span><span class="nt">&gt;&lt;span&gt;</span>Cheddar<span class="nt">&lt;/span&gt;&lt;/div&gt;&lt;div</span> <span class="na">class=</span><span class="s">&quot;cheese&quot;</span><span class="nt">&gt;&lt;span&gt;</span>Gouda<span class="nt">&lt;/span&gt;&lt;/div&gt;</span>
</pre></div>
</div>
<div class="highlight-java"><div class="highlight"><pre><span class="n">List</span><span class="o">&lt;</span><span class="n">WebElement</span><span class="o">&gt;</span> <span class="n">cheeses</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElements</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">className</span><span class="o">(</span><span class="s">&quot;cheese&quot;</span><span class="o">));</span>
</pre></div>
</div>
<div class="highlight-csharp"><div class="highlight"><pre><span class="n">IList</span><span class="p">&lt;</span><span class="n">IWebElement</span><span class="p">&gt;</span> <span class="n">cheeses</span> <span class="p">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">FindElements</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">ClassName</span><span class="p">(</span><span class="s">&quot;cheese&quot;</span><span class="p">));</span>
</pre></div>
</div>
<div class="highlight-ruby"><div class="highlight"><pre><span class="n">cheeses</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_elements</span><span class="p">(</span><span class="ss">:class_name</span><span class="p">,</span> <span class="s2">&quot;cheese&quot;</span><span class="p">)</span>

<span class="ow">or</span>

<span class="n">cheeses</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_elements</span><span class="p">(</span><span class="ss">:class</span><span class="p">,</span> <span class="s2">&quot;cheese&quot;</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-python"><pre>cheeses = driver.find_elements_by_class_name("cheese")

or

from selenium.webdriver.common.by import By
cheeses = driver.find_elements(By.CLASS_NAME, "cheese")</pre>
</div>
</div>
<div class="section" id="by-tag-name">
<h4>By Tag Name<a class="headerlink" href="#by-tag-name" title="Permalink to this headline">??</a></h4>
<p>The DOM Tag Name of the element.</p>
<p>Example of how to find an element that looks like this:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">&quot;...&quot;</span><span class="nt">&gt;&lt;/iframe&gt;</span>
</pre></div>
</div>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebElement</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">tagName</span><span class="o">(</span><span class="s">&quot;iframe&quot;</span><span class="o">));</span>
</pre></div>
</div>
<div class="highlight-csharp"><div class="highlight"><pre><span class="n">IWebElement</span> <span class="n">frame</span> <span class="p">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">FindElement</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">TagName</span><span class="p">(</span><span class="s">&quot;iframe&quot;</span><span class="p">));</span>
</pre></div>
</div>
<div class="highlight-ruby"><div class="highlight"><pre><span class="n">frame</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:tag_name</span><span class="p">,</span> <span class="s2">&quot;iframe&quot;</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-python"><pre>frame = driver.find_element_by_tag_name("iframe")

or

from selenium.webdriver.common.by import By
frame = driver.find_element(By.TAG_NAME, "iframe")</pre>
</div>
</div>
<div class="section" id="by-name">
<h4>By Name<a class="headerlink" href="#by-name" title="Permalink to this headline">??</a></h4>
<p>Find the input element with matching name attribute.</p>
<p>Example of how to find an element that looks like this:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;cheese&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span><span class="nt">/&gt;</span>
</pre></div>
</div>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebElement</span> <span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="s">&quot;cheese&quot;</span><span class="o">));</span>
</pre></div>
</div>
<div class="highlight-csharp"><div class="highlight"><pre><span class="n">IWebElement</span> <span class="n">cheese</span> <span class="p">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">FindElement</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">Name</span><span class="p">(</span><span class="s">&quot;cheese&quot;</span><span class="p">));</span>
</pre></div>
</div>
<div class="highlight-ruby"><div class="highlight"><pre><span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="s2">&quot;cheese&quot;</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-python"><pre>cheese = driver.find_element_by_name("cheese")

or

from selenium.webdriver.common.by import By
cheese = driver.find_element(By.NAME, "cheese")</pre>
</div>
</div>
<div class="section" id="by-link-text">
<h4>By Link Text<a class="headerlink" href="#by-link-text" title="Permalink to this headline">??</a></h4>
<p>Find the link element with matching visible text.</p>
<p>Example of how to find an element that looks like this:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.google.com/search?q=cheese&quot;</span><span class="nt">&gt;</span>cheese<span class="nt">&lt;/a&gt;</span>&gt;
</pre></div>
</div>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebElement</span> <span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">linkText</span><span class="o">(</span><span class="s">&quot;cheese&quot;</span><span class="o">));</span>
</pre></div>
</div>
<div class="highlight-csharp"><div class="highlight"><pre><span class="n">IWebElement</span> <span class="n">cheese</span> <span class="p">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">FindElement</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">LinkText</span><span class="p">(</span><span class="s">&quot;cheese&quot;</span><span class="p">));</span>
</pre></div>
</div>
<div class="highlight-ruby"><div class="highlight"><pre><span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:link_text</span><span class="p">,</span> <span class="s2">&quot;cheese&quot;</span><span class="p">)</span>

<span class="ow">or</span>

<span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:link</span><span class="p">,</span> <span class="s2">&quot;cheese&quot;</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-python"><pre>cheese = driver.find_element_by_link_text("cheese")

or

from selenium.webdriver.common.by import By
cheese = driver.find_element(By.LINK_TEXT, "cheese")</pre>
</div>
</div>
<div class="section" id="by-partial-link-text">
<h4>By Partial Link Text<a class="headerlink" href="#by-partial-link-text" title="Permalink to this headline">??</a></h4>
<p>Find the link element with partial matching visible text.</p>
<p>Example of how to find an element that looks like this:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.google.com/search?q=cheese&quot;</span><span class="nt">&gt;</span>search for cheese<span class="nt">&lt;/a&gt;</span>&gt;
</pre></div>
</div>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebElement</span> <span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">partialLinkText</span><span class="o">(</span><span class="s">&quot;cheese&quot;</span><span class="o">));</span>
</pre></div>
</div>
<div class="highlight-csharp"><div class="highlight"><pre><span class="n">IWebElement</span> <span class="n">cheese</span> <span class="p">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">FindElement</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">PartialLinkText</span><span class="p">(</span><span class="s">&quot;cheese&quot;</span><span class="p">));</span>
</pre></div>
</div>
<div class="highlight-ruby"><div class="highlight"><pre><span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:partial_link_text</span><span class="p">,</span> <span class="s2">&quot;cheese&quot;</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-python"><pre>cheese = driver.find_element_by_partial_link_text("cheese")

or

from selenium.webdriver.common.by import By
cheese = driver.find_element(By.PARTIAL_LINK_TEXT, "cheese")</pre>
</div>
</div>
<div class="section" id="by-css">
<h4>By CSS<a class="headerlink" href="#by-css" title="Permalink to this headline">??</a></h4>
<p>Like the name implies it is a locator strategy by css. Native browser support
is used by default, so please refer to <cite>w3c css selectors &lt;http://www.w3.org/TR/CSS/#selectors&gt;</cite>
for a list of generally available css selectors. If a browser does not have
native support for css queries, then <a class="reference external" href="http://sizzlejs.com/">Sizzle</a> is used. IE 6,7 and FF3.0
currently use Sizzle as the css query engine.</p>
<p>Beware that not all browsers were created equal, some css that might work in one version may not work
in another.</p>
<p>Example of to find the cheese below:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;food&quot;</span><span class="nt">&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;dairy&quot;</span><span class="nt">&gt;</span>milk<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;dairy aged&quot;</span><span class="nt">&gt;</span>cheese<span class="nt">&lt;/span&gt;&lt;/div&gt;</span>
</pre></div>
</div>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebElement</span> <span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">cssSelector</span><span class="o">(</span><span class="s">&quot;#food span.dairy.aged&quot;</span><span class="o">));</span>
</pre></div>
</div>
<div class="highlight-csharp"><div class="highlight"><pre><span class="n">IWebElement</span> <span class="n">cheese</span> <span class="p">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">FindElement</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">CssSelector</span><span class="p">(</span><span class="s">&quot;#food span.dairy.aged&quot;</span><span class="p">));</span>
</pre></div>
</div>
<div class="highlight-ruby"><div class="highlight"><pre><span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:css</span><span class="p">,</span> <span class="s2">&quot;#food span.dairy.aged&quot;</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-python"><pre>cheese = driver.find_element_by_css_selector("#food span.dairy.aged")

or

from selenium.webdriver.common.by import By
cheese = driver.find_element(By.CSS_SELECTOR, "#food span.dairy.aged")</pre>
</div>
</div>
<div class="section" id="by-xpath">
<h4>By XPATH<a class="headerlink" href="#by-xpath" title="Permalink to this headline">??</a></h4>
<p>At a high level, WebDriver uses a browser&#8217;s native XPath capabilities wherever
possible. On those browsers that don&#8217;t have native XPath support, we have
provided our own implementation. This can lead to some unexpected behaviour
unless you are aware of the differences in the various xpath engines.</p>
<table border="1" class="docutils">
<colgroup>
<col width="28%" />
<col width="24%" />
<col width="27%" />
<col width="21%" />
</colgroup>
<thead valign="bottom">
<tr><th class="head">Driver</th>
<th class="head">Tag and Attribute Name</th>
<th class="head">Attribute Values</th>
<th class="head">Native XPath Support</th>
</tr>
</thead>
<tbody valign="top">
<tr><td><a class="reference internal" href="#htmlunit-driver">HtmlUnit Driver</a></td>
<td>Lower-cased</td>
<td>As they appear in the HTML</td>
<td>Yes</td>
</tr>
<tr><td><a class="reference internal" href="#internet-explorer-driver">Internet Explorer Driver</a></td>
<td>Lower-cased</td>
<td>As they appear in the HTML</td>
<td>No</td>
</tr>
<tr><td><a class="reference internal" href="#firefox-driver">Firefox Driver</a></td>
<td>Case insensitive</td>
<td>As they appear in the HTML</td>
<td>Yes</td>
</tr>
</tbody>
</table>
<p>This is a little abstract, so for the following piece of HTML:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;example&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;INPUT</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;other&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
<div class="highlight-java"><div class="highlight"><pre><span class="n">List</span><span class="o">&lt;</span><span class="n">WebElement</span><span class="o">&gt;</span> <span class="n">inputs</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElements</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">xpath</span><span class="o">(</span><span class="s">&quot;//input&quot;</span><span class="o">));</span>
</pre></div>
</div>
<div class="highlight-csharp"><div class="highlight"><pre><span class="n">IList</span><span class="p">&lt;</span><span class="n">IWebElement</span><span class="p">&gt;</span> <span class="n">inputs</span> <span class="p">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">FindElements</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">XPath</span><span class="p">(</span><span class="s">&quot;//input&quot;</span><span class="p">));</span>
</pre></div>
</div>
<div class="highlight-ruby"><div class="highlight"><pre><span class="n">inputs</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_elements</span><span class="p">(</span><span class="ss">:xpath</span><span class="p">,</span> <span class="s2">&quot;//input&quot;</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-python"><pre>inputs = driver.find_elements_by_xpath("//input")

or

from selenium.webdriver.common.by import By
inputs = driver.find_elements(By.XPATH, "//input")</pre>
</div>
<p>The following number of matches will be found</p>
<table border="1" class="docutils">
<colgroup>
<col width="21%" />
<col width="24%" />
<col width="24%" />
<col width="32%" />
</colgroup>
<thead valign="bottom">
<tr><th class="head">XPath expression</th>
<th class="head"><a class="reference internal" href="#htmlunit-driver">HtmlUnit Driver</a></th>
<th class="head"><a class="reference internal" href="#firefox-driver">Firefox Driver</a></th>
<th class="head"><a class="reference internal" href="#internet-explorer-driver">Internet Explorer Driver</a></th>
</tr>
</thead>
<tbody valign="top">
<tr><td>//input</td>
<td>1 (&#8220;example&#8221;)</td>
<td>2</td>
<td>2</td>
</tr>
<tr><td>//INPUT</td>
<td>0</td>
<td>2</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>Sometimes HTML elements do not need attributes to be explicitly declared
because they will default to known values. For example, the &#8220;input&#8221; tag does
not require the &#8220;type&#8221; attribute because it defaults to &#8220;text&#8221;. The rule of
thumb when using xpath in WebDriver is that you <strong>should not</strong> expect to be able
to match against these implicit attributes.</p>
</div>
<div class="section" id="using-javascript">
<h4>Using JavaScript<a class="headerlink" href="#using-javascript" title="Permalink to this headline">??</a></h4>
<p>You can execute arbitrary javascript to find an element and as long as you return a DOM Element,
it will be automatically converted to a WebElement object.</p>
<p>Simple example on a page that has jQuery loaded:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebElement</span> <span class="n">element</span> <span class="o">=</span> <span class="o">(</span><span class="n">WebElement</span><span class="o">)</span> <span class="o">((</span><span class="n">JavascriptExecutor</span><span class="o">)</span><span class="n">driver</span><span class="o">).</span><span class="na">executeScript</span><span class="o">(</span><span class="s">&quot;return $(&#39;.cheese&#39;)[0]&quot;</span><span class="o">);</span>
</pre></div>
</div>
<div class="highlight-csharp"><div class="highlight"><pre><span class="n">IWebElement</span> <span class="n">element</span> <span class="p">=</span> <span class="p">(</span><span class="n">IWebElement</span><span class="p">)</span> <span class="p">((</span><span class="n">IJavaScriptExecutor</span><span class="p">)</span><span class="n">driver</span><span class="p">).</span><span class="n">ExecuteScript</span><span class="p">(</span><span class="s">&quot;return $(&#39;.cheese&#39;)[0]&quot;</span><span class="p">);</span>
</pre></div>
</div>
<div class="highlight-ruby"><div class="highlight"><pre><span class="n">element</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">execute_script</span><span class="p">(</span><span class="s2">&quot;return $(&#39;.cheese&#39;)[0]&quot;</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span class="n">element</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">execute_script</span><span class="p">(</span><span class="s">&quot;return $(&#39;.cheese&#39;)[0]&quot;</span><span class="p">)</span>
</pre></div>
</div>
<p>Finding all the input elements to the every label on a page:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">List</span><span class="o">&lt;</span><span class="n">WebElement</span><span class="o">&gt;</span> <span class="n">labels</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElements</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">tagName</span><span class="o">(</span><span class="s">&quot;label&quot;</span><span class="o">));</span>
<span class="n">List</span><span class="o">&lt;</span><span class="n">WebElement</span><span class="o">&gt;</span> <span class="n">inputs</span> <span class="o">=</span> <span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">WebElement</span><span class="o">&gt;)</span> <span class="o">((</span><span class="n">JavascriptExecutor</span><span class="o">)</span><span class="n">driver</span><span class="o">).</span><span class="na">executeScript</span><span class="o">(</span>
    <span class="s">&quot;var labels = arguments[0], inputs = []; for (var i=0; i &lt; labels.length; i++){&quot;</span> <span class="o">+</span>
    <span class="s">&quot;inputs.push(document.getElementById(labels[i].getAttribute(&#39;for&#39;))); } return inputs;&quot;</span><span class="o">,</span> <span class="n">labels</span><span class="o">);</span>
</pre></div>
</div>
<div class="highlight-csharp"><div class="highlight"><pre><span class="n">IList</span><span class="p">&lt;</span><span class="n">IWebElement</span><span class="p">&gt;</span> <span class="n">labels</span> <span class="p">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">FindElements</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">TagName</span><span class="p">(</span><span class="s">&quot;label&quot;</span><span class="p">));</span>
<span class="n">IList</span><span class="p">&lt;</span><span class="n">IWebElement</span><span class="p">&gt;</span> <span class="n">inputs</span> <span class="p">=</span> <span class="p">(</span><span class="n">IList</span><span class="p">&lt;</span><span class="n">IWebElement</span><span class="p">&gt;)</span> <span class="p">((</span><span class="n">IJavaScriptExecutor</span><span class="p">)</span><span class="n">driver</span><span class="p">).</span><span class="n">ExecuteScript</span><span class="p">(</span>
    <span class="s">&quot;var labels = arguments[0], inputs = []; for (var i=0; i &lt; labels.length; i++){&quot;</span> <span class="p">+</span>
    <span class="s">&quot;inputs.push(document.getElementById(labels[i].getAttribute(&#39;for&#39;))); } return inputs;&quot;</span><span class="p">,</span> <span class="n">labels</span><span class="p">);</span>
</pre></div>
</div>
<div class="highlight-ruby"><div class="highlight"><pre><span class="n">labels</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_elements</span><span class="p">(</span><span class="ss">:tag_name</span><span class="p">,</span> <span class="s2">&quot;label&quot;</span><span class="p">)</span>
<span class="n">inputs</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">execute_script</span><span class="p">(</span>
    <span class="s2">&quot;var labels = arguments[0], inputs = []; for (var i=0; i &lt; labels.length; i++){&quot;</span> <span class="o">+</span>
    <span class="s2">&quot;inputs.push(document.getElementById(labels[i].getAttribute(&#39;for&#39;))); } return inputs;&quot;</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span class="n">labels</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_elements_by_tag_name</span><span class="p">(</span><span class="s">&quot;label&quot;</span><span class="p">)</span>
<span class="n">inputs</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">execute_script</span><span class="p">(</span>
    <span class="s">&quot;var labels = arguments[0], inputs = []; for (var i=0; i &lt; labels.length; i++){&quot;</span> <span class="o">+</span>
    <span class="s">&quot;inputs.push(document.getElementById(labels[i].getAttribute(&#39;for&#39;))); } return inputs;&quot;</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="user-input-filling-in-forms">
<h3>User Input - Filling In Forms<a class="headerlink" href="#user-input-filling-in-forms" title="Permalink to this headline">??</a></h3>
<p>We&#8217;ve already seen how to enter text into a textarea or text field, but what
about the other elements? You can &#8220;toggle&#8221; the state of checkboxes, and you
can use &#8220;click&#8221; to set something like an OPTION tag selected. Dealing
with SELECT tags isn&#8217;t too bad:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebElement</span> <span class="n">select</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">tagName</span><span class="o">(</span><span class="s">&quot;select&quot;</span><span class="o">));</span>
<span class="n">List</span><span class="o">&lt;</span><span class="n">WebElement</span><span class="o">&gt;</span> <span class="n">allOptions</span> <span class="o">=</span> <span class="n">select</span><span class="o">.</span><span class="na">findElements</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">tagName</span><span class="o">(</span><span class="s">&quot;option&quot;</span><span class="o">));</span>
<span class="k">for</span> <span class="o">(</span><span class="n">WebElement</span> <span class="n">option</span> <span class="o">:</span> <span class="n">allOptions</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Value is: %s&quot;</span><span class="o">,</span> <span class="n">option</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&quot;value&quot;</span><span class="o">)));</span>
    <span class="n">option</span><span class="o">.</span><span class="na">click</span><span class="o">();</span>
<span class="o">}</span>
</pre></div>
</div>
<div class="highlight-csharp"><div class="highlight"><pre><span class="n">IWebElement</span> <span class="n">select</span> <span class="p">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">FindElement</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">TagName</span><span class="p">(</span><span class="s">&quot;select&quot;</span><span class="p">));</span>
<span class="n">IList</span><span class="p">&lt;</span><span class="n">IWebElement</span><span class="p">&gt;</span> <span class="n">allOptions</span> <span class="p">=</span> <span class="n">select</span><span class="p">.</span><span class="n">FindElements</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">TagName</span><span class="p">(</span><span class="s">&quot;option&quot;</span><span class="p">));</span>
<span class="k">foreach</span> <span class="p">(</span><span class="n">IWebElement</span> <span class="n">option</span> <span class="k">in</span> <span class="n">allOptions</span><span class="p">)</span>
<span class="k">{</span>
    <span class="n">System</span><span class="p">.</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Value is: &quot;</span> <span class="p">+</span> <span class="n">option</span><span class="p">.</span><span class="n">GetAttribute</span><span class="p">(</span><span class="s">&quot;value&quot;</span><span class="p">));</span>
    <span class="n">option</span><span class="p">.</span><span class="n">Click</span><span class="p">();</span>
<span class="k">}</span>
</pre></div>
</div>
<div class="highlight-ruby"><div class="highlight"><pre><span class="nb">select</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:tag_name</span><span class="p">,</span> <span class="s2">&quot;select&quot;</span><span class="p">)</span>
<span class="n">all_options</span> <span class="o">=</span> <span class="nb">select</span><span class="o">.</span><span class="n">find_elements</span><span class="p">(</span><span class="ss">:tag_name</span><span class="p">,</span> <span class="s2">&quot;option&quot;</span><span class="p">)</span>
<span class="n">all_options</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">option</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="s2">&quot;Value is: &quot;</span> <span class="o">+</span> <span class="n">option</span><span class="o">.</span><span class="n">attribute</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">)</span>
  <span class="n">option</span><span class="o">.</span><span class="n">click</span>
<span class="k">end</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span class="n">select</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_tag_name</span><span class="p">(</span><span class="s">&quot;select&quot;</span><span class="p">)</span>
<span class="n">allOptions</span> <span class="o">=</span> <span class="n">select</span><span class="o">.</span><span class="n">find_elements_by_tag_name</span><span class="p">(</span><span class="s">&quot;option&quot;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">option</span> <span class="ow">in</span> <span class="n">allOptions</span><span class="p">:</span>
    <span class="k">print</span> <span class="s">&quot;Value is: &quot;</span> <span class="o">+</span> <span class="n">option</span><span class="o">.</span><span class="n">get_attribute</span><span class="p">(</span><span class="s">&quot;value&quot;</span><span class="p">)</span>
    <span class="n">option</span><span class="o">.</span><span class="n">click</span><span class="p">()</span>
</pre></div>
</div>
<p>This will find the first &#8220;SELECT&#8221; element on the page, and cycle through each
of its OPTIONs in turn, printing out their values, and selecting each in turn.
As you will notice, this isn&#8217;t the most efficient way of dealing with SELECT
elements. WebDriver&#8217;s support classes include one called &#8220;Select&#8221;, which
provides useful methods for interacting with these.</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">Select</span> <span class="n">select</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Select</span><span class="o">(</span><span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">tagName</span><span class="o">(</span><span class="s">&quot;select&quot;</span><span class="o">)));</span>
<span class="n">select</span><span class="o">.</span><span class="na">deselectAll</span><span class="o">();</span>
<span class="n">select</span><span class="o">.</span><span class="na">selectByVisibleText</span><span class="o">(</span><span class="s">&quot;Edam&quot;</span><span class="o">);</span>
</pre></div>
</div>
<div class="highlight-csharp"><div class="highlight"><pre><span class="n">SelectElement</span> <span class="n">select</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SelectElement</span><span class="p">(</span><span class="n">driver</span><span class="p">.</span><span class="n">FindElement</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">TagName</span><span class="p">(</span><span class="s">&quot;select&quot;</span><span class="p">)));</span>
<span class="n">select</span><span class="p">.</span><span class="n">DeselectAll</span><span class="p">();</span>
<span class="n">select</span><span class="p">.</span><span class="n">SelectByText</span><span class="p">(</span><span class="s">&quot;Edam&quot;</span><span class="p">);</span>
</pre></div>
</div>
<div class="highlight-ruby"><div class="highlight"><pre><span class="c1"># available since 2.14</span>
    <span class="nb">select</span> <span class="o">=</span> <span class="no">Selenium</span><span class="o">::</span><span class="no">WebDriver</span><span class="o">::</span><span class="no">Support</span><span class="o">::</span><span class="no">Select</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:tag_name</span><span class="p">,</span> <span class="s2">&quot;select&quot;</span><span class="p">))</span>
    <span class="nb">select</span><span class="o">.</span><span class="n">deselect_all</span><span class="p">()</span>
    <span class="nb">select</span><span class="o">.</span><span class="n">select_by</span><span class="p">(</span><span class="ss">:text</span><span class="p">,</span> <span class="s2">&quot;Edam&quot;</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span class="c"># available since 2.12</span>
<span class="kn">from</span> <span class="nn">selenium.webdriver.support.ui</span> <span class="kn">import</span> <span class="n">Select</span>
<span class="n">select</span> <span class="o">=</span> <span class="n">Select</span><span class="p">(</span><span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_tag_name</span><span class="p">(</span><span class="s">&quot;select&quot;</span><span class="p">))</span>
<span class="n">select</span><span class="o">.</span><span class="n">deselect_all</span><span class="p">()</span>
<span class="n">select</span><span class="o">.</span><span class="n">select_by_visible_text</span><span class="p">(</span><span class="s">&quot;Edam&quot;</span><span class="p">)</span>
</pre></div>
</div>
<p>This will deselect all OPTIONs from the first SELECT on the page, and then
select the OPTION with the displayed text of &#8220;Edam&#8221;.</p>
<p>Once you&#8217;ve finished filling out the form, you probably want to submit it. One
way to do this would be to find the &#8220;submit&#8221; button and click it:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">id</span><span class="o">(</span><span class="s">&quot;submit&quot;</span><span class="o">)).</span><span class="na">click</span><span class="o">();</span>
</pre></div>
</div>
<p>Alternatively, WebDriver has the convenience method &#8220;submit&#8221; on every element.
If you call this on an element within a form, WebDriver will walk up the DOM
until it finds the enclosing form and then calls submit on that. If the
element isn&#8217;t in a form, then the <tt class="docutils literal"><span class="pre">NoSuchElementException</span></tt> will be thrown:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">element</span><span class="o">.</span><span class="na">submit</span><span class="o">();</span>
</pre></div>
</div>
</div>
<div class="section" id="moving-between-windows-and-frames">
<h3>Moving Between Windows and Frames<a class="headerlink" href="#moving-between-windows-and-frames" title="Permalink to this headline">??</a></h3>
<p>Some web applications have many frames or multiple windows. WebDriver supports
moving between named windows using the &#8220;switchTo&#8221; method:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="na">switchTo</span><span class="o">().</span><span class="na">window</span><span class="o">(</span><span class="s">&quot;windowName&quot;</span><span class="o">);</span>
</pre></div>
</div>
<p>All calls to <tt class="docutils literal"><span class="pre">driver</span></tt> will now be interpreted as being directed to the
particular window. But how do you know the window&#8217;s name? Take a look at the
javascript or link that opened it:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;somewhere.html&quot;</span> <span class="na">target=</span><span class="s">&quot;windowName&quot;</span><span class="nt">&gt;</span>Click here to open a new window<span class="nt">&lt;/a&gt;</span>
</pre></div>
</div>
<p>Alternatively, you can pass a &#8220;window handle&#8221; to the &#8220;switchTo().window()&#8221;
method. Knowing this, it&#8217;s possible to iterate over every open window like so:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">handle</span> <span class="o">:</span> <span class="n">driver</span><span class="o">.</span><span class="na">getWindowHandles</span><span class="o">())</span> <span class="o">{</span>
    <span class="n">driver</span><span class="o">.</span><span class="na">switchTo</span><span class="o">().</span><span class="na">window</span><span class="o">(</span><span class="n">handle</span><span class="o">);</span>
<span class="o">}</span>
</pre></div>
</div>
<p>You can also swing from frame to frame (or into iframes):</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="na">switchTo</span><span class="o">().</span><span class="na">frame</span><span class="o">(</span><span class="s">&quot;frameName&quot;</span><span class="o">);</span>
</pre></div>
</div>
<p>It&#8217;s possible to access subframes by separating the path with a dot, and you
can specify the frame by its index too. That is:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="na">switchTo</span><span class="o">().</span><span class="na">frame</span><span class="o">(</span><span class="s">&quot;frameName.0.child&quot;</span><span class="o">);</span>
</pre></div>
</div>
<p>would go to the frame named &#8220;child&#8221; of the first subframe of the frame called
&#8220;frameName&#8221;. <strong>All frames are evaluated as if from *top*.</strong></p>
</div>
<div class="section" id="popup-dialogs">
<h3>Popup Dialogs<a class="headerlink" href="#popup-dialogs" title="Permalink to this headline">??</a></h3>
<p>Starting with Selenium 2.0 beta 1, there is built in support for handling popup
dialog boxes. After you&#8217;ve triggered an action that opens a
popup, you can access the alert with the following:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">Alert</span> <span class="n">alert</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">switchTo</span><span class="o">().</span><span class="na">alert</span><span class="o">();</span>
</pre></div>
</div>
<p>This will return the currently open alert object. With this object you can now accept,
dismiss, read its contents or even type into a prompt. This interface works equally
well on alerts, confirms, prompts. Refer to the <a class="reference external" href="http://selenium.googlecode.com/svn/trunk/docs/api/java/index.html">JavaDocs</a> for more information.</p>
</div>
<div class="section" id="navigation-history-and-location">
<h3>Navigation: History and Location<a class="headerlink" href="#navigation-history-and-location" title="Permalink to this headline">??</a></h3>
<p>Earlier, we covered navigating to a page using the &#8220;get&#8221; command (
<tt class="docutils literal"><span class="pre">driver.get(&quot;http://www.example.com&quot;)</span></tt>) As you&#8217;ve seen, WebDriver has a
number of smaller, task-focused interfaces, and navigation is a useful task.
Because loading a page is such a fundamental requirement, the method to do this
lives on the main WebDriver interface, but it&#8217;s simply a synonym to:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="na">navigate</span><span class="o">().</span><span class="na">to</span><span class="o">(</span><span class="s">&quot;http://www.example.com&quot;</span><span class="o">);</span>
</pre></div>
</div>
<p>To reiterate: &#8220;<tt class="docutils literal"><span class="pre">navigate().to()</span></tt>&#8221; and &#8220;<tt class="docutils literal"><span class="pre">get()</span></tt>&#8221; do exactly the same thing.
One&#8217;s just a lot easier to type than the other!</p>
<p>The &#8220;navigate&#8221; interface also exposes the ability to move backwards and forwards in your browser&#8217;s history:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="na">navigate</span><span class="o">().</span><span class="na">forward</span><span class="o">();</span>
<span class="n">driver</span><span class="o">.</span><span class="na">navigate</span><span class="o">().</span><span class="na">back</span><span class="o">();</span>
</pre></div>
</div>
<p>Please be aware that this functionality depends entirely on the underlying
browser. It&#8217;s just possible that something unexpected may happen when you call
these methods if you&#8217;re used to the behaviour of one browser over another.</p>
</div>
<div class="section" id="cookies">
<h3>Cookies<a class="headerlink" href="#cookies" title="Permalink to this headline">??</a></h3>
<p>Before we leave these next steps, you may be interested in understanding how to
use cookies. First of all, you need to be on the domain that the cookie will be
valid for. If you are trying to preset cookies before
you start interacting with a site and your homepage is large / takes a while to load
an alternative is to find a smaller page on the site, typically the 404 page is small
(<a class="reference external" href="http://example.com/some404page">http://example.com/some404page</a>)</p>
<div class="highlight-java"><div class="highlight"><pre><span class="c">// Go to the correct domain</span>
<span class="n">driver</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;http://www.example.com&quot;</span><span class="o">);</span>

<span class="c">// Now set the cookie. This one&#39;s valid for the entire domain</span>
<span class="n">Cookie</span> <span class="n">cookie</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cookie</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">);</span>
<span class="n">driver</span><span class="o">.</span><span class="na">manage</span><span class="o">().</span><span class="na">addCookie</span><span class="o">(</span><span class="n">cookie</span><span class="o">);</span>

<span class="c">// And now output all the available cookies for the current URL</span>
<span class="n">Set</span><span class="o">&lt;</span><span class="n">Cookie</span><span class="o">&gt;</span> <span class="n">allCookies</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">manage</span><span class="o">().</span><span class="na">getCookies</span><span class="o">();</span>
<span class="k">for</span> <span class="o">(</span><span class="n">Cookie</span> <span class="n">loadedCookie</span> <span class="o">:</span> <span class="n">allCookies</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%s -&gt; %s&quot;</span><span class="o">,</span> <span class="n">loadedCookie</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">loadedCookie</span><span class="o">.</span><span class="na">getValue</span><span class="o">()));</span>
<span class="o">}</span>

<span class="c">// You can delete cookies in 3 ways</span>
<span class="c">// By name</span>
<span class="n">driver</span><span class="o">.</span><span class="na">manage</span><span class="o">().</span><span class="na">deleteCookieNamed</span><span class="o">(</span><span class="s">&quot;CookieName&quot;</span><span class="o">);</span>
<span class="c">// By Cookie</span>
<span class="n">driver</span><span class="o">.</span><span class="na">manage</span><span class="o">().</span><span class="na">deleteCookie</span><span class="o">(</span><span class="n">loadedCookie</span><span class="o">);</span>
<span class="c">// Or all of them</span>
<span class="n">driver</span><span class="o">.</span><span class="na">manage</span><span class="o">().</span><span class="na">deleteAllCookies</span><span class="o">();</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span class="c"># Go to the correct domain</span>
<span class="n">driver</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;http://www.example.com&quot;</span><span class="p">)</span>

<span class="c"># Now set the cookie. Here&#39;s one for the entire domain</span>
<span class="c"># the cookie name here is &#39;key&#39; and it&#39;s value is &#39;value&#39;</span>
<span class="n">driver</span><span class="o">.</span><span class="n">add_cookie</span><span class="p">({</span><span class="s">&#39;name&#39;</span><span class="p">:</span><span class="s">&#39;key&#39;</span><span class="p">,</span> <span class="s">&#39;value&#39;</span><span class="p">:</span><span class="s">&#39;value&#39;</span><span class="p">,</span> <span class="s">&#39;path&#39;</span><span class="p">:</span><span class="s">&#39;/&#39;</span><span class="p">})</span>
<span class="c"># additional keys that can be passed in are:</span>
<span class="c"># &#39;domain&#39; -&gt; String, &#39;secure&#39; -&gt; Boolean,</span>
<span class="c"># &#39;expiry&#39; -&gt; Milliseconds since the Epoch it should expire.</span>

<span class="c"># And now output all the available cookies for the current URL</span>
<span class="k">for</span> <span class="n">cookie</span> <span class="ow">in</span> <span class="n">driver</span><span class="o">.</span><span class="n">get_cookies</span><span class="p">:</span>
    <span class="k">print</span> <span class="s">&quot;</span><span class="si">%s</span><span class="s"> -&gt; </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">cookie</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">],</span> <span class="n">cookie</span><span class="p">[</span><span class="s">&#39;value&#39;</span><span class="p">])</span>

<span class="c"># You can delete cookies in 2 ways</span>
<span class="c"># By name</span>
<span class="n">driver</span><span class="o">.</span><span class="n">delete_cookie</span><span class="p">(</span><span class="s">&quot;CookieName&quot;</span><span class="p">)</span>
<span class="c"># Or all of them</span>
<span class="n">driver</span><span class="o">.</span><span class="n">delete_all_cookies</span><span class="p">()</span>
</pre></div>
</div>
</div>
<div class="section" id="changing-the-user-agent">
<h3>Changing the User Agent<a class="headerlink" href="#changing-the-user-agent" title="Permalink to this headline">??</a></h3>
<p>This is easy with the <a class="reference internal" href="#firefox-driver">Firefox Driver</a>:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">FirefoxProfile</span> <span class="n">profile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxProfile</span><span class="o">();</span>
<span class="n">profile</span><span class="o">.</span><span class="na">addAdditionalPreference</span><span class="o">(</span><span class="s">&quot;general.useragent.override&quot;</span><span class="o">,</span> <span class="s">&quot;some UA string&quot;</span><span class="o">);</span>
<span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="o">(</span><span class="n">profile</span><span class="o">);</span>
</pre></div>
</div>
</div>
<div class="section" id="drag-and-drop">
<h3>Drag And Drop<a class="headerlink" href="#drag-and-drop" title="Permalink to this headline">??</a></h3>
<p>Here&#8217;s an example of using the Actions class to perform a drag and drop.
Native events are required to be enabled.</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebElement</span> <span class="n">element</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="s">&quot;source&quot;</span><span class="o">));</span>
<span class="n">WebElement</span> <span class="n">target</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="s">&quot;target&quot;</span><span class="o">));</span>

<span class="o">(</span><span class="k">new</span> <span class="n">Actions</span><span class="o">(</span><span class="n">driver</span><span class="o">)).</span><span class="na">dragAndDrop</span><span class="o">(</span><span class="n">element</span><span class="o">,</span> <span class="n">target</span><span class="o">).</span><span class="na">perform</span><span class="o">();</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="driver-specifics-and-tradeoffs">
<h2>Driver Specifics and Tradeoffs<a class="headerlink" href="#driver-specifics-and-tradeoffs" title="Permalink to this headline">??</a></h2>
</div>
<div class="section" id="webdriver-backed-selenium-rc">
<h2>WebDriver-Backed Selenium-RC<a class="headerlink" href="#webdriver-backed-selenium-rc" title="Permalink to this headline">??</a></h2>
<p>The Java version of WebDriver provides an implementation of the Selenium-RC API.  These means that
you can use the underlying WebDriver technology using the Selenium-RC API.  This is primarily
provided for backwards compatibility.  It allows those who have existing test suites using the
Selenium-RC API to use WebDriver under the covers.  It&#8217;s provided to help ease the migration path
to Selenium-WebDriver.  Also, this allows one to use both APIs, side-by-side, in the same test code.</p>
<p>Selenium-WebDriver is used like this:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="c">// You may use any WebDriver implementation. Firefox is used here as an example</span>
<span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="o">();</span>

<span class="c">// A &quot;base url&quot;, used by selenium to resolve relative URLs</span>
 <span class="n">String</span> <span class="n">baseUrl</span> <span class="o">=</span> <span class="s">&quot;http://www.google.com&quot;</span><span class="o">;</span>

<span class="c">// Create the Selenium implementation</span>
<span class="n">Selenium</span> <span class="n">selenium</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WebDriverBackedSelenium</span><span class="o">(</span><span class="n">driver</span><span class="o">,</span> <span class="n">baseUrl</span><span class="o">);</span>

<span class="c">// Perform actions with selenium</span>
<span class="n">selenium</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="s">&quot;http://www.google.com&quot;</span><span class="o">);</span>
<span class="n">selenium</span><span class="o">.</span><span class="na">type</span><span class="o">(</span><span class="s">&quot;name=q&quot;</span><span class="o">,</span> <span class="s">&quot;cheese&quot;</span><span class="o">);</span>
<span class="n">selenium</span><span class="o">.</span><span class="na">click</span><span class="o">(</span><span class="s">&quot;name=btnG&quot;</span><span class="o">);</span>

<span class="c">// Get the underlying WebDriver implementation back. This will refer to the</span>
<span class="c">// same WebDriver instance as the &quot;driver&quot; variable above.</span>
<span class="n">WebDriver</span> <span class="n">driverInstance</span> <span class="o">=</span> <span class="o">((</span><span class="n">WebDriverBackedSelenium</span><span class="o">)</span> <span class="n">selenium</span><span class="o">).</span><span class="na">getUnderlyingWebDriver</span><span class="o">();</span>

<span class="c">//Finally, close the browser. Call stop on the WebDriverBackedSelenium instance</span>
<span class="c">//instead of calling driver.quit(). Otherwise, the JVM will continue running after</span>
<span class="c">//the browser has been closed.</span>
<span class="n">selenium</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</pre></div>
</div>
<div class="section" id="id12">
<h3>Pros<a class="headerlink" href="#id12" title="Permalink to this headline">??</a></h3>
<ul class="simple">
<li>Allows for the WebDriver and Selenium APIs to live side-by-side</li>
<li>Provides a simple mechanism for a managed migration from the Selenium RC API
to WebDriver&#8217;s</li>
<li>Does not require the standalone Selenium RC server to be run</li>
</ul>
</div>
<div class="section" id="id13">
<h3>Cons<a class="headerlink" href="#id13" title="Permalink to this headline">??</a></h3>
<ul class="simple">
<li>Does not implement every method</li>
<li>More advanced Selenium usage (using &#8220;browserbot&#8221; or other built-in JavaScript
methods from Selenium Core) may not work</li>
<li>Some methods may be slower due to underlying implementation differences</li>
</ul>
</div>
<div class="section" id="backing-webdriver-with-selenium">
<h3>Backing WebDriver with Selenium<a class="headerlink" href="#backing-webdriver-with-selenium" title="Permalink to this headline">??</a></h3>
<p>WebDriver doesn&#8217;t support as many browsers as Selenium RC does, so in order to
provide that support while still using the WebDriver API, you can make use of
the <tt class="docutils literal"><span class="pre">SeleneseCommandExecutor</span></tt></p>
<p>Safari is supported in this way with the following code (be sure to disable
pop-up blocking):</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">DesiredCapabilities</span> <span class="n">capabilities</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DesiredCapabilities</span><span class="o">();</span>
<span class="n">capabilities</span><span class="o">.</span><span class="na">setBrowserName</span><span class="o">(</span><span class="s">&quot;safari&quot;</span><span class="o">);</span>
<span class="n">CommandExecutor</span> <span class="n">executor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SeleneseCommandExecutor</span><span class="o">(</span><span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="s">&quot;http://localhost:4444/&quot;</span><span class="o">),</span> <span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="s">&quot;http://www.google.com/&quot;</span><span class="o">),</span> <span class="n">capabilities</span><span class="o">);</span>
<span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RemoteWebDriver</span><span class="o">(</span><span class="n">executor</span><span class="o">,</span> <span class="n">capabilities</span><span class="o">);</span>
</pre></div>
</div>
<p>There are currently some major limitations with this approach, notably that
findElements doesn&#8217;t work as expected. Also, because we&#8217;re using Selenium Core
for the heavy lifting of driving the browser, you are limited by the JavaScript
sandbox.</p>
</div>
</div>
<div class="section" id="selenium-webdriver-wiki">
<span id="seleniumwebdriverwiki"></span><h2>Selenium WebDriver Wiki<a class="headerlink" href="#selenium-webdriver-wiki" title="Permalink to this headline">??</a></h2>
<p>You can find further resources for WebDriver
in <a class="reference external" href="http://code.google.com/p/selenium/wiki/FurtherResources">WebDriver&#8217;s wiki</a></p>
</div>
<div class="section" id="next-steps">
<h2>Next Steps<a class="headerlink" href="#next-steps" title="Permalink to this headline">??</a></h2>
<p>This chapter has simply been a high level walkthrough of WebDriver and some of its key
capabilities.  Once getting familiar with the Selenium-WebDriver API you will then want to learn
how to build test suites for maintainability, extensibility, and reduced fragility when features of
the AUT frequently change.  The approach most Selenium experts are now recommending is to design
your test code using the Page Object Design Pattern along with possibly a Page Factory.
Selenium-WebDriver provides support for this by supplying a PageFactory class in Java and C#.
This is presented,along with other advanced topics, in the
<a class="reference external" href="04_webdriver_advanced.html#chapter04-reference"><em>next chapter</em></a>.  Also, for high-level description of this
technique, you may want to look at the
<a class="reference external" href="06_test_design_considerations.html#chapter06-reference"><em>Test Design Considerations chapter</em></a>.  Both of these
chapters present techniques for writing more maintainable tests by making your test code more
modular.</p>
</div>
</div>


          </div>
        </div>
      </div>

      <div class="clearer"></div>
    </div>

    <div class="footer">
      &copy; Copyright 2008-2012, Selenium Project.
      Last updated on Jan 19, 2012.
    </div>
    </div>
</div>
<div id="footer">
    <ul id="sitemap">
        <li><a href="/projects/">Selenium Projects</a>
            <ul>
                <li><a href="/projects/ide/">Selenium IDE</a></li>
                <li><a href="/projects/remote-control/">Selenium Remote Control</a></li>
                <li><a href="/projects/webdriver/">Selenium WebDriver</a></li>
                <li><a href="/projects/grid">Selenium Grid</a></li>
            </ul>
        </li>
        <li><a href="/docs/">Documentation</a>
            <ul>
                <li><a href="/docs/">Online version</a></li>
                <li><a href="/docs/book/Selenium_Documentation.pdf">Offline version (pdf)</a></li>
                <li><a href="http://code.google.com/p/selenium/w/list">Wiki</a></li>
                <li><a href="/download/#client-drivers">Selenium API</a></li>
            </ul>
        </li>
        <li><a href="/support/">Support</a>
            <ul>
                <li><a href="http://groups.google.com/group/selenium-users">User Group</a></li>
                <li><a href="http://code.google.com/p/selenium/issues/list">Bug Tracker</a></li>
                <li><a href="/support/index.html#CommercialSupport">Commercial Support</a></li>
                <li><a href="/support/index.html#IRC">IRC</a></li>
            </ul>
        </li>
        <li><a href="/about/">About Selenium</a>
            <ul>
                <li><a href="/about/how.html">How it Works</a></li>
                <li><a href="/about/platforms.html">Supported Platforms</a></li>
                <li><a href="/about/contributors.html">Who made Selenium</a>
                <li><a href="/about/news.jsp">News/Blogs</a></li>
                <li><a href="http://code.google.com/p/selenium/wiki/RoadMap">Roadmap</a></li>
                <li><a href="/about/getting-involved.html">Getting Involved</a></li>
            </ul>
        </li>
        <li><a href="http://openqa.org/">OpenQA.org</a>
            <ul>
                <li><a href="http://openqa.org/sass/index.action">Create an account</a></li>
                <li><a href="http://openqa.org/sass/index.action">Account management</a></li>
                <li><a href="http://openqa.org/sponsors.action">Sponsors</a></li>
            </ul>
        </li>
    </ul>
    <a href="http://openqa.org/"><img alt="openqa.org logo" id="footerLogo" src="/images/openqa-logo.png"/></a>
</div>
</div>

</body>
</html>
