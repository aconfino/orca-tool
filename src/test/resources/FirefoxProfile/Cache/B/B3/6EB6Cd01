TTOService = (function(){
var _instance = {
kAJAX_SetDataFilePersistent : "setDataFilePersistent",
kAJAX_SetDataFileNonPersistent : "setDataFileNonPersistent",
kAJAX_GetKeywordList : "getKeywordList",
kAJAX_GetShoppingCartData : "getShoppingCartData",
kAJAX_PurchaseModule : "purchaseModule",
kAJAX_GetBizCodeList : "getBizCodeList",
kAJAX_GetTopicList : "getTopicList",
kAJAX_LogEmail : "logEmail",
kAJAX_GetBookmarkURL : "getBookmarkURL",
kAJAX_SetBookmark : "setBookmark",
kAJAX_KeepAlive : "keepAlive",
kAJAX_DoFullSave : "doFullSave",
kAJAX_HandleRIA : "RIA",
kAJAX_GetFASList : "GetFASList",
kAJAX_FormsMode : "formsMode",
kAJAX_EFile : "eFile",
kAJAX_SetEZStepData : "setEZStepData",
kAJAX_GetEZStepData : "getEZStepData",
kAJAX_Upgrade : "upgrade",
kAJAX_GetABTests : "getABtests",
kAJAX_GetBookmarkList : "getBookmarkList",
kAJAX_DeleteBookmark : "deleteBookmark",
kAJAX_UpdateTicket : "updateTicket",
kAJAX_GetFormML : "getFormML",
kAJAX_ABTestData : "ABTestData",
kJSON_EZStepData : "EZStepData",
kJSON_EFSuccess : "EFSuccess",
kJSON_EFErrorMsg : "EFErrorMsg",
kFeedBackCommand : "feedback",
kFileUploadCommand : "uploadprevyrdatafile",
kUploadPDFCommand : "uploadpdf",
create : function (createTO, handler ) {
var url = _getRequestPath(kCreateRequest);
var POSTData = "cr=";
POSTData += "";
POSTData += "&cmd="
POSTData += kCreateRequest
POSTData += "&uid=";
POSTData += createTO.id;
POSTData += "&prodid=";
POSTData += createTO.prodid;
POSTData += "&csrc=";
POSTData += createTO.csrc;
POSTData += "&proddata=";
POSTData += createTO.proddata;
_postToApp(true, url,POSTData, handler, createTO.pageId);
},
allocate : function (pageId, handler ) {
var url = _getRequestPath(kAllocateRequest);
var POSTData = "cr=";
POSTData += "";
POSTData += "&cmd="
POSTData += kAllocateRequest;
POSTData += "&uid="
POSTData += _serviceData.userId;
POSTData += "&prodid=";
POSTData += _serviceData.prodId;
POSTData += "&csrc=";
POSTData += _serviceData.csrc;
POSTData += "&app=";
POSTData += _serviceData.taxserver;
POSTData += "&pt=";
POSTData += _serviceData.port
_postToApp(true, url, POSTData, handler, pageId);
},
submit : function (submitTO, handler ) {
var url = _createPOSTUrl(kSubmitRequest)
var clientReq = {};
clientReq[kControlParam]= submitTO.clientrequest
clientReq[kStateParam]= TTOModel.getPageInfo().CRstate
if (submitTO.hogStatus) {
clientReq[kStatusParam]= true
}
var POSTData = _formatPOSTData(clientReq);
_postToApp(true, url, POSTData, handler, submitTO.pageId);
},
download: function (downloadTO) {
var url = _createGETUrl(kDownloadDatafileRequest, null, downloadTO.filename)
downloadTO.responseFrame.location.replace(url);
},
ajax : function (ajaxTO, handler ) {
var url = _getRequestPath(kAJAXRequest);
url += "/" + ajaxTO.cmd
var POSTData = _formatPOSTData(ajaxTO.data);
_postToApp(true, url,POSTData, handler, ajaxTO.cmd);
},
servlet : function (servletTO, handler ) {
var url = "/services/" + servletTO.servletPath + "/" + servletTO.actionName;
_postToApp(true, url, servletTO.data, handler, servletTO.servletPath);
},
getPDFUrl : function (printTO) {
var printData = "printType=" +printTO.printType;
printData += "&watermark=" + printTO.watermark;
if (printTO.formList.length>0) {
printData += "&formList="
var forms = printTO.formList
for (var i=0; i<forms.length; ++i) {
if(i>0)
printData += ";"
printData += forms[i];
}
}
if(printTO.formsetList.length > 0) {
printData += "&formsetList="
var formsetids = printTO.formsetList;
for( var i=0; i < formsetids.length; ++i){
if(i >0)
printData += ";"
printData += formsetids[i];
}
}
var otherparams = [{name:"save", value:printTO.save}]
return _createGETUrl(kGeneratePDFRequest, printData, printTO.filename, otherparams)
},
executeFormCommand : function (fmTO, handler) {
var url = _getRequestPath(kAJAXRequest);
url += "/" + kAJAX_FormsMode
var util = new FormsModeUtil();
if (null != fmTO.submitData) {
util.addSubmitFormValues(fmTO.submitData);
}
if (null != fmTO.formToAdd) {
util.addAddForm(fmTO.formToAdd);
util.addGetFormImage(fmTO.formToAdd);
}
if (null != fmTO.formToDelete) {
util.addDeleteForm(fmTO.formToDelete);
util.addGetFormsInReturn( fmTO.allowHiddenForms );
}
if (fmTO.getFormsInReturn) {
util.addGetFormsInReturn( fmTO.allowHiddenForms );
}
if (null != fmTO.formFieldToGet) {
util.addGetFormFieldData(fmTO.formFieldToGet);
}
if (null != fmTO.AgencyListToLoad) {
util.addGetAgencyFormList(fmTO.AgencyListToLoad);
}
var formsModeRequest = util.getSubmitVal()
var POSTData = _formatPOSTData(formsModeRequest);
_postToApp(true, url, POSTData, handler, this.kformsModeRequest);
},
upgrade : function (UpgradeTO, handler ) {
var url = _getRequestPath(kAJAXRequest);
url += "/" + this.kAJAX_Upgrade
var POSTData = _formatPOSTData("sku="+UpgradeTO.sku+"&regeneratePage="+UpgradeTO.regeneratePage);
_postToApp(true, url, POSTData, handler, this.kAJAX_Upgrade);
},
getTopicList : function(handler ) {
var url = _getRequestPath(kAJAXRequest);
url += "/" + this.kAJAX_GetTopicList;
var POSTData = _formatPOSTData(null);
_postToApp(true, url, POSTData, handler, this.kAJAX_GetTopicList);
},
clearReturn : function (handler , st) {
var url = _createPOSTUrl(kClearReturnRequest, null, st ? [{name:"skipTransfer", value:st}] : null);
_postToApp(true, url, "", handler, "CLEAR_REQUEST");
},
topicJump : function (TopicJumpTO, handler ) {
var url = _createPOSTUrl(kTopicJumpRequest, null, [{name:"topicPath", value:TopicJumpTO.topicPath}]);
var clientReq = {}
clientReq[kControlParam]= TopicJumpTO.clientrequest
clientReq[kStateParam]= TTOModel.getPageInfo().CRstate
var POSTData = _formatPOSTData(clientReq);
_postToApp(true, url, POSTData, handler, "TOPIC_JUMP");
},
shutdown : function (delay, handler ) {
var url = _createPOSTUrl(kEndSessionRequest, null, [{name:"delay", value:delay}]);
_postToApp(true, url,null, handler, "ENDSESSION");
},
setServiceData : function (serviceDataTO) {
if (!serviceDataTO.taxserver) TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("TTOService","setServiceData: Invalid or missing taxserver", LOG_ERROR));
if (!serviceDataTO.port) TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("TTOService","setServiceData: Invalid or missing port", LOG_ERROR));
if (!serviceDataTO.userId) TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("TTOService","setServiceData: Invalid or missing userid", LOG_ERROR));
_serviceData = serviceDataTO;
_initialized = true;
},
migrate : function (handler ) {
var url = _getRequestPath(kMigrateRequest);
var POSTData = "cr=";
POSTData += "";
POSTData += "&cmd="
POSTData += kMigrateRequest;
POSTData += "&uid="
POSTData += _serviceData.userId;
POSTData += "&prodid=";
POSTData += _serviceData.prodId;
POSTData += "&csrc=";
POSTData += _serviceData.csrc;
POSTData += "&app=";
POSTData += _serviceData.taxserver;
POSTData += "&pt=";
POSTData += _serviceData.port
_postToApp(true, url, POSTData, handler, "MIGRATE_REQUEST");
},
logError : function (error ) {
var POSTData = "component=" + encodeURIComponent(error.component)
POSTData += "&message=" + encodeURIComponent(error.msg)
POSTData += "&userid=" + encodeURIComponent(TTOModel.getUserId())
POSTData += "&browser=" + encodeURIComponent(navigator.userAgent)
POSTData += "&dialogid=" + encodeURIComponent(TTOModel.getDialogInfo().screenId)
POSTData += "&dialogtitle=" + encodeURIComponent(TTOModel.getDialogInfo().title)
var url = kUILogger + "/" + error.logType;
_postToApp(true,url,POSTData)
},
logout : function (authId, handler) {
var url = kAuthURL + "/" + kSignOutRequest;
var postData = "command=";
postData += kSignOutRequest;
postData += "&authid=";
postData += authId;
_postToApp(false, url,postData, handler, "LOGOUT");
},
checkDelayedAuthUser : function(cmd, handler) {
var authId = TTOModel.getAuthId();
var url = kAuthURL + "/" + kCheckDelayedAuthRequest;
var postData = "command=";
postData += kCheckDelayedAuthRequest;
postData += "&authid=";
postData += authId;
_postToApp(true, url, postData, handler, "DELAYED AUTH");
},
getTTOUrl : function( cmd, cr, filename, opt) {
return _createGETUrl(cmd,cr,filename,opt)
},
getContentUrl : function (system, alias, extraParams , isFlow) {
var Url;
var host;
var params = "priorityCode=" + TTOModel.getCustomerSrc()
params += "&productId=" + TTOModel.getProductId()
params += "&productName=" + escape(TTOModel.getProductInfo().prodName)
params += "&returningUser=" + TTOModel.isPriorYrUser()
params += "&accessible=" + TTOModel.isAccessible()
params += "&abtest="+escape(TTOModel.getABTestAsParams())
params += "&referrer=" + TTOModel.getReferrer()
params += "&trial=" + TTOModel.isDelayedAuth()
params += "&taxYear=" + "2011"
params += "&isDebug=" + TTOModel.isQA()
pb = TTOApp.findCtrlByType(26);
if (pb) {
params += "&tab=" + pb.getCurCat();
params += "&subtab=" + pb.getCurSubItem();
}
if (extraParams) {
for (var paramName in extraParams)
{
params += "&" + paramName + "=" + extraParams[paramName]
}
}
switch (system.toLowerCase()) {
case "estore" : host = kEstoreExtContentURI;
break;
case "local" : host = kTTOHostedContentURI;
host += kLocalContentPath;
host += "/" + _serviceData.userId + "/" + _serviceData.taxserver + ":" + _serviceData.port;
break;
case "riadialog" : host = kTTOHostedContentURI;
host += isFlow?kFlowPath:kEasystepPath;
host += "/" + _serviceData.userId + "/" + _serviceData.taxserver + ":" + _serviceData.port;
break;
case "test" :
if (!TTOModel.isQA()) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("TTOService", "getContentUrl - NOT a QA Build and Requesting test content Server", LOG_WARNING));
break;
}
host = DebugModel.getTestContentServer();
if (!host)
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("TTOService", "Test Content Server not defined", LOG_INFO));
if (alias.indexOf('.') < 0) alias += ".htm"
break;
default : TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("TTOService", "getContentUrl - Invalid system: "+system, LOG_ERROR));
}
Url = host + "/" + alias + "?" + params;
return Url;
},
getAllowedFeatures: function( handler, productId) {
var authId = TTOModel.getAuthId();
var url = kEntitlementHandler + "/allowedfeatures/" + authId + "/" + productId;
_getFromApp(url, handler);
},
getPDFUploadUrl : function(cmd) {
var url = _getRequestPath(cmd);
var curTaxYear = "2011";
var prvTaxYear = curTaxYear - 1;
var suffix = "?sku=" + encodeURIComponent(TTOModel.getProductInfo().prodAlias) + "&year=" + prvTaxYear;
return url + suffix;
},
getLogInfo: function(logPath, handler) {
var url = kLogRetrievalURI +logPath
_getFromApp(url, handler);
}
};
var kCreateRequest = "create",
kAllocateRequest = "allocate",
kMigrateRequest = "migrate",
kSubmitRequest = "submit",
kAJAXRequest = "ajax",
kEndSessionRequest = "endsession",
kClearReturnRequest = "clear",
kDownloadDatafileRequest= "downloaddatafile",
kGeneratePDFRequest = "generatepdf",
kTopicJumpRequest = "topicjump",
kformsModeRequest = "formsmode",
kSignOutRequest = "SignOut",
kCheckDelayedAuthRequest= "CheckDelayedAuth",
kLoadManager = '/services/sessionmanager',
kTaxAppHandler = '/services/goldmember',
kUILogger = '/services/uilogger',
kTaxAppHandler = '/services/goldmember',
kAuthURL = "/services/tto-auth",
kEntitlementHandler = "/services/entitlement",
kDataExchangeHandler = "/services/dataexchange",
kLogRetrievalURI = "/services/logretrieval",
kTTOHostedContentURI = "/services/content",
kEstoreExtContentURI = "https://turbotax.intuit.com/tto/alias",
kLocalContentPath = "/internalcontent",
kEasystepPath = '/easystep',
kFlowPath = "/flow",
kClientRequest = "clientRequest",
kStateParam = "state",
kControlParam = "ctl",
kStatusParam = "status",
kPageGUID = "reqID",
kProfile = "profile",
_serviceData,
_initialized = false;
function _getRequestPath(cmd) {
if ( (kCreateRequest==cmd) || (kAllocateRequest==cmd) || (kMigrateRequest==cmd) ) {
return kLoadManager + '/' + cmd;
}
else {
return kTaxAppHandler + '/' + _serviceData.userId + "/" + _serviceData.taxserver + ":" + _serviceData.port + "/" + cmd ;
}
}
function _createPOSTUrl (cmd, filename , otherParams ) {
if (!_initialized) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("TTOService","_createPOSTUrl - Unitialized Service", LOG_ERROR));
return "NULO"
}
var url = _getRequestPath(cmd);
if(filename)
url+= "/"+filename
url += "?"
if (otherParams) {
for (var i = 0; i < otherParams.length; i++) {
var itm = otherParams[i]
url += "&" + itm.name
url += "=" + itm.value;
}
}
return url;
}
function _createGETUrl (cmd, clientRequest, filename , otherParams ) {
if (!_initialized) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("TTOService","_createGETUrl - Unitialized Service", LOG_ERROR));
return "NULO"
}
var url = _getRequestPath(cmd);
var GETData = "clientRequest=";
if (clientRequest)
GETData += encodeURIComponent(clientRequest);
if (otherParams) {
for (var i=0; i<otherParams.length; i++) {
var itm = otherParams[i]
GETData += "&"+itm.name
GETData += "="+itm.value;
}
}
var uniqueToken = new Date().getTime();
GETData += "&utk=" + uniqueToken;
if(filename)
url+= "/"+filename
url += "?"+GETData;
return url;
}
function _formatPOSTData(inData) {
var POSTData = "";
if (inData && typeof(inData) == "object") {
for (var o in inData) {
POSTData += o
POSTData += "=" + encodeURIComponent(inData[o]);
POSTData += "&"
}
}
else {
POSTData = inData?inData:""
}
return kClientRequest + "=" + encodeURIComponent(POSTData)
}
function _postToApp(async, url, POSTData, responseHandler, pageID ) {
xhr = new Ajax()
xhr.setAsync(async)
xhr.setURL(url)
xhr.setMethod("POST")
xhr.setPOSTData(POSTData);
xhr.setReqHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT")
xhr.setReqHeader('Content-Type', 'application/x-www-form-urlencoded');
xhr.setReqHeader("TTO-pageID", pageID?pageID:"");
xhr.setSuccessCallback(_serviceSuccessCB)
xhr.setErrorCallback(_serviceFailureCB)
xhr.setTimeoutCallback(_serviceTimeoutCB)
xhr.send();
function _serviceSuccessCB( xhr) {
if (responseHandler) {responseHandler.doSuccess(xhr);}
}
function _serviceFailureCB(xhr ) {
if (responseHandler) {responseHandler.doFailure(xhr, url);}
}
function _serviceTimeoutCB(rsp) {
if (responseHandler) {responseHandler.doTimeout(rsp, url);}
}
xhr = null;
}
function _getFromApp(url, responseHandler) {
jQuery.ajax({
url: url,
data: "",
success: function(json, status, xhr) {
responseHandler.doSuccess(json, status, xhr);
},
error: function(xhr, status, error) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("AJAX","Failed GET Request. URL: "+url+" STATUS CODE: "+xhr.status+" MSG: "+error))
responseHandler.doFailure(xhr, status, error);
},
dataType: "json"
});
}
return _instance;
})();
function Ajax () {
var t=this
t.URL=""
t.method="GET"
t.POSTData=null
t.successCB=null
t.errCB=null
t.headers=new Array()
t.async=true
t.timeoutCB = null;
t.timeout = null;
t.timer = null;
t._xhr=null
}
function _AjaxSend()
{
var t=this
t._xhr=_getXHR()
t._xhr.open(t.method, t.URL, t.async);
for (var i=0; i<t.headers.length; i++){
if(t.headers[i].value && t.headers[i].value.length>0)
t._xhr.setRequestHeader( t.headers[i].name, t.headers[i].value );
}
function abortXhrTimeout() {
if (t && t._xhr) {
t._xhr.abort();
if (t.timeoutCB) {
t.timeoutCB();
}
}
}
t._xhr.send(t.POSTData);
if (t.timeout) {
t.timer = setTimeout(abortXhrTimeout, t.timeout);
}
if (!t.async) {
if (t.timer) clearTimeout(t.timer);
if (t._xhr.status >= 200 && t._xhr.status < 300) if (t.successCB) t.successCB(t._xhr)
else if (t.errCB) t.errCB(t._xhr)
t._xhr=null
return
}
t._xhr.onreadystatechange = function() {
if (t._xhr.readyState >= 2) {
if (t.timer) {
clearTimeout(t.timer);
}
}
if (t._xhr.readyState == 4) {
if (t._xhr.status >= 200 && t._xhr.status < 300) {
if (t.successCB) t.successCB(t._xhr)
}
else {
if (t.errCB) t.errCB(t._xhr)
}
t._xhr=null
}
}
}
function _getXHR(){
try { return new XMLHttpRequest(); } catch(e) {}
try { return new ActiveXObject("Msxml2.XMLHTTP"); } catch (e) {}
try { return new ActiveXObject("Microsoft.XMLHTTP"); } catch (e) {}
alert ("XMLHttpRequest not supported")
return null
}
Ajax.prototype=new Ajax()
p=Ajax.prototype
p.constructor=Ajax
p.setURL=function(url){this.URL=url}
p.setMethod=function(method){this.method=method}
p.setPOSTData=function(data){this.POSTData=data}
p.setSuccessCallback=function(cb){this.successCB=cb}
p.setErrorCallback=function(cb){this.errCB=cb}
p.setReqHeader=function(name,value){var o = new Object(); o.name=name; o.value=value; this.headers.push(o)}
p.setAsync=function(bAsync){this.async=bAsync}
p.setTimeoutCallback=function(cb, timeout){this.timeoutCB=cb; this.timeout=timeout; }
p.send=_AjaxSend
p.getXHRObj=_getXHR
p=null
function Class() { }
Class.prototype.construct = function() {};
Class.__asMethod__ = function(func, baseClass) {
return function() {
var currentSuperClass = this.superClass;
this.superClass = baseClass;
var ret = func.apply(this, arguments);
this.superClass = currentSuperClass;
return ret;
};
};
Class.extend = function(def, static) {
var classDef = function() {
if (arguments[0] !== Class) {
this.construct.apply(this, arguments);
}
};
var proto = new this(Class);
var baseClass = this.prototype;
for (var n in def) {
var item = def[n];
if (item instanceof Function) {
item = Class.__asMethod__(item, baseClass);
}
proto[n] = item;
}
if (static) {
for (var n in static) {
classDef[n] = static[n];
}
}
proto.superClass = baseClass;
classDef.prototype = proto;
classDef.extend = this.extend;
return classDef;
};
var JSONSerializer = {
toString: function (obj) {
var t = typeof (obj);
if (t != "object" || obj === null) {
if (t == "string") obj = '"'+obj+'"';
return String(obj);
}
else {
var n, v, json = [], arr = (obj && obj.constructor == Array);
for (n in obj) {
v = obj[n]; t = typeof(v);
if (t == "string") v = '"'+v+'"';
else if (t == "object" && v !== null) v = this.toString(v);
json.push((arr ? "" : '"' + n + '":') + String(v));
}
return (arr ? "[" : "{") + String(json) + (arr ? "]" : "}");
}
},
toJSON : function (jsonString) {
if (!jsonString) return null
jsonString = jsonString.replace(/\0$/,"")
var json = null;
try {
json = eval('(' + jsonString + ')');
}
catch (ex) {
if ('undefined' != TTOEventPubSub) TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("JSONSerializer","Invalid JSON\n\n"+jsonString,LOG_ERROR, ex))
}
return json
}
}
TTOServiceHandler = Class.extend({
_onHandleSuccess : null,
_onHandleFailure : null,
_onHandleTimeout : null,
_responseTO : null,
construct : function (){
this.constructor = TTOServiceHandler
this._responseTO = new TTOResponseTO();
},
setSuccessCB : function(CB){this._onHandleSuccess=CB;},
setFailureCB : function(CB){this._onHandleFailure=CB;},
setTimeoutCB : function(CB){this._onHandleTimeout=CB;},
getResponseTO : function () {return this._responseTO;},
doSuccess : function (rsp ) {
var r = this._responseTO
r.httpStatus = rsp.status;
r.httpStatusText = rsp.statusText;
r.responseText = rsp.responseText;
r.responseXML = rsp.responseXML;
r.responseJSON = JSONSerializer.toJSON(rsp.responseText);
if (this._onHandleSuccess)
this._onHandleSuccess(r)
},
doFailure : function(rsp , url ) {
var r = this._responseTO
try {
r.httpStatus = rsp.status;
r.httpStatusText = rsp.statusText;
}
catch(error) {
}
finally {
if (this._onHandleFailure) {
this._onHandleFailure(r, url)
}
}
},
doTimeout : function(rsp , url ) {
var r = this._responseTO
r.httpStatus = rsp.status;
r.httpStatusText = rsp.statusText;
if (this._onHandleTimeout)
this._onHandleTimeout(r, url)
}
});
function UpgradeHandler (cmd ) {
TTOServiceHandler.call(this)
this._successCB = null
this._cmd = cmd
this._onHandleSuccess = function(respTO) {
var json = respTO.responseJSON
ModalWindow.hide()
if (this._cmd.reqTO.regeneratePage) {
TTOController.regeneratePage(respTO);
}
else if (json && json.sessionEvt && json.sessionEvt.evt == 'updatePage') {
var updateData = json.sessionEvt.data
if (updateData.evtList) {
var evts = updateData.evtList
for (var i=0; i<evts.length; i++) {
var itm = evts[i].pageEvt
TTOController.handlePageEvents(itm.evt,itm.data)
}
}
if (updateData.regions) {
TTOApp.renderRegions(updateData.regions);
}
}
if (this._successCB) this._successCB(respTO)
}
this._onHandleFailure = function(respTO) {
ModalWindow.hide()
}
}
UpgradeHandler.prototype=new TTOServiceHandler()
p=UpgradeHandler.prototype
p.constructor=UpgradeHandler
p.setSuccessCB=function(CB){this._successCB=CB;}
p.setFailureCB=function(CB){}
p=null
AjaxHandler = TTOServiceHandler.extend({
_successCB : null,
_cmd : null,
construct : function (cmd) {
this.superClass.construct.call(this)
this.constructor = AjaxHandler
_cmd = cmd
this._onHandleSuccess = function(respTO){
var json = respTO.responseJSON
if (json && json.sessionEvt) {
TTOController.handleSessionEvent(json.sessionEvt)
}
if (this._successCB) this._successCB(respTO)
}
},
setSuccessCB : function(CB){this._successCB=CB;}
});
function ClearReturnHandler (cmd ) {
TTOServiceHandler.call(this)
this._successCB = null
this._cmd = cmd
this._onHandleSuccess = function(respTO) {
var json = respTO.responseJSON
if (this._cmd.reqTO.regeneratePage) {
TTOController.regeneratePage(respTO);
}
if (this._successCB) this._successCB(respTO)
}
}
ClearReturnHandler.prototype=new TTOServiceHandler()
p=ClearReturnHandler.prototype
p.constructor=ClearReturnHandler
p.setSuccessCB=function(CB){this._successCB=CB;}
p=null
function GetAllowedFeaturesHandler(cmd ){
TTOServiceHandler.call(this)
this._cmd = cmd
}
function _onSuccess(jsonResp){
if (jsonResp) TTOModel.setAllowedFeatures(jsonResp.features)
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_FeatureListRetrieved);
}
function _onError(xhr, status, error) {
}
GetAllowedFeaturesHandler.prototype=new TTOServiceHandler()
p=GetAllowedFeaturesHandler.prototype
p.constructor=GetAllowedFeaturesHandler
p.doSuccess=_onSuccess
p.doFailure =_onError;
p=null
function GetLogInfoHandler (cmd , logType, logWin) {
TTOServiceHandler.call(this)
this._cmd = cmd
this._logType = logType
this._logWin = logWin
}
function _gliHandleSuccess(json) {
this.showLog(json, 1)
}
function _gliHandleError(json) {
this.showLog(json, 0)
}
function _gliShowLog(json, success){
var d= this._logWin.document
d.writeln('<HTML>')
d.writeln('<HEAD>')
switch(this._logType){
case GetLogInfoCommand.kPIDEventLog:
d.writeln('<TITLE>PID EVENT LOG INFO</TITLE>')
break;
case GetLogInfoCommand.kPIDEventTDErrors:
d.writeln('<TITLE>TD ERRORS EVENT LOG</TITLE>')
break;
case GetLogInfoCommand.kPIDDumpDataLog:
d.writeln('<TITLE>DATA DUMP LOG</TITLE>')
break;
}
d.writeln('<LINK REL="STYLESHEET" TYPE="text/css" HREF="/css/fonts.css">')
d.writeln('</HEAD>')
d.writeln('<BODY>')
if (success){
if (json){
logs = json.logEntry;
if ( logs.length == 0 ){
d.writeln('No information in the PID event log OR errors are not included in the pidEventErrorList!');
} else {
for (var i=0; i <logs.length; i++ ){
if (GetLogInfoCommand.kPIDDumpDataLog != this._logType) {
d.writeln('<p>' + logs[i].messageType + '&nbsp;&nbsp;&nbsp;' + logs[i].messageDateTime + '</p>')
}
d.writeln('<p>' + logs[i].message)
}
}
} else {
d.writeln('No information in the PID event log!');
}
} else {
if (500 == json.status){
d.writeln('PID event log is not available, please check the PIDEventLogEnabled entry in logOptions.ini!');
} else {
d.writeln(json.responseText);
}
}
d.writeln('</BODY>')
d.writeln('</HTML>')
d.close()
this._logWin.focus()
}
GetLogInfoHandler.prototype=new TTOServiceHandler()
p=GetLogInfoHandler.prototype
p.constructor=GetLogInfoHandler
p.doSuccess = _gliHandleSuccess
p.doFailure = _gliHandleError
p.showLog = _gliShowLog
p=null
GetTopicListHandler = TTOServiceHandler.extend({
_successCB : null,
_cmd : null,
construct : function(cmd) {
this.superClass.construct.call(this);
this.constructor = GetTopicListHandler;
_cmd = cmd;
this._onHandleSuccess = function(respTO) {
var json = respTO.responseJSON;
TTOEventPubSub.publishEvent(zTopicList.kTopicListReturnedEvent, json);
};
}
});
function TTOResponseTO() {
this.httpStatus;
this.httpStatusText;
this.sessionEvent = null;
this.EZStepData = null
this.responseJSON=null
this.responseXML=null
}
TTOCommand = Class.extend({
reqTO : null,
async : true,
handler : null,
construct : function (reqTO ){
this.constuctor = TTOCommand
this.reqTO=reqTO;
this.handler=new TTOServiceHandler();
},
setSuccessCB : function(CB){
this.handler.setSuccessCB(CB);
},
setFailureCB : function(CB){
this.handler.setFailureCB(CB);
},
setTimeoutCB : function(CB){
this.handler.setTimeoutCB(CB);
},
execute : function(){}
});
TTORequestTO = Class.extend({
pageId : "",
construct : function() {}
});
SubmitCommand = TTOCommand.extend({
construct : function (reqTO ) {
this.superClass.construct.call(this,reqTO)
},
execute : function () {
if (! (this.reqTO instanceof SubmitTO)) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("COMMAND","requestTO is not an SubmitTO"))
return
}
TTOService.submit(this.reqTO, this.handler);
}
});
SubmitTO = TTORequestTO.extend({
pageCount : 0,
clientrequest : "",
hogStatus : false,
construct : function() {}
});
AllocateCommand = SubmitCommand.extend({
construct : function (reqTO ) {
this.superClass.construct.call(this,reqTO)
},
execute : function () {
if (! (this.reqTO instanceof SubmitTO)) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("COMMAND","requestTO is not an SubmitTO"))
return
}
TTOService.allocate(this.reqTO.pageId, this.handler);
}
});
CreateCommand = TTOCommand.extend({
construct : function (reqTO ) {
this.superClass.construct.call(this,reqTO)
},
execute : function () {
if (! (this.reqTO instanceof CreateTO)) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("COMMAND","requestTO is not an CreateTO"))
return
}
TTOService.create(this.reqTO, this.handler);
}
});
CreateTO = TTORequestTO.extend({
id : "",
csrc : "",
prodid : "",
proddata : "",
construct : function() {}
});
AjaxCommand = TTOCommand.extend({
construct : function (reqTO ) {
this.superClass.construct.call(this,reqTO)
this.handler = new AjaxHandler(this);
},
execute : function () {
if (! (this.reqTO instanceof AjaxTO)) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("COMMAND","requestTO is not an AjaxTO"))
return
}
TTOService.ajax(this.reqTO, this.handler);
}
});
AjaxTO = TTORequestTO.extend({
cmd : "",
data : "",
construct : function() {}
});
ShutdownCommand = TTOCommand.extend({
construct : function (reqTO ) {
this.superClass.construct.call(this,reqTO)
},
execute : function () {
if (! (this.reqTO instanceof QuitTO)) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("COMMAND","requestTO is not an QuitTO"))
return
}
TTOService.shutdown(this.reqTO.delay, this.handler);
}
});
QuitTO = TTORequestTO.extend({
delay : false,
construct : function() {}
});
function UpdateDialogInfoCommand (reqTO ) {
TTOCommand.call(this,reqTO)
this.execute = function() {
if (null == this.reqTO || this.reqTO.constructor != DialogInfoTO) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("COMMAND","requestTO is not a DialogInfoTO"))
return
}
TTOModel.updateCurDialogInfo(this.reqTO)
}
}
UpdateDialogInfoCommand.prototype = new TTOCommand()
UpdateDialogInfoCommand.prototype.constructor=UpdateDialogInfoCommand
function DialogInfoTO () {
this.curFS = ""
this.curForm = ""
this.curField = ""
this.topicId = ""
this.screenId = ""
this.type = 0
this.historyType = ""
this. pii = false
}
function UpdateProductInfoCommand (reqTO ) {
TTOCommand.call(this,reqTO)
this.handler = new GetAllowedFeaturesHandler(this);
TTOService.getAllowedFeatures(this.handler, this.reqTO.prodID);
this.execute = function() {
if (null == this.reqTO || this.reqTO.constructor != ProductInfoTO) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("COMMAND","requestTO is not a ProductInfoTO"))
return
}
TTOModel.updateProductInfo(this.reqTO)
}
}
UpdateProductInfoCommand.prototype = new TTOCommand()
UpdateProductInfoCommand.prototype.constructor=UpdateProductInfoCommand
function ProductInfoTO () {
this.prodName = ""
this.prodID = ""
this.prodAlias = ""
this.engVer = ""
this.referrer = ""
this.fsVer = ""
}
function UpdatePageInfoCommand (reqTO ) {
TTOCommand.call(this,reqTO)
this.execute = function() {
if (null == this.reqTO || this.reqTO.constructor != PageInfoTO){
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("COMMAND","requestTO is not a PageInfoTO"))
return
}
TTOModel.updatePageInfo(this.reqTO)
}
}
UpdatePageInfoCommand.prototype = new TTOCommand()
UpdatePageInfoCommand.prototype.constructor=UpdatePageInfoCommand
function PageInfoTO () {
this.reqId = ""
this.type = ""
this.CRstate = ""
this.pgCnt = ""
this.lcTags = ""
this.lcTitle = ""
}
function UpdateUserInfoCommand (reqTO ) {
TTOCommand.call(this,reqTO)
this.execute = function() {
if (null == this.reqTO || this.reqTO.constructor != UserInfoTO) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("COMMAND","requestTO is not a UserInfoTO"))
return
}
TTOModel.updateUserInfo(this.reqTO)
}
}
UpdateUserInfoCommand.prototype = new TTOCommand()
UpdateUserInfoCommand.prototype.constructor=UpdateUserInfoCommand
function UserInfoTO () {
this.pid = "";
this.prodid = 0;
this.origProdid = 0;
this.paid = false
this.printed = false
this.efiled = false
this.customerType = false
}
function SetBrandingInfoCommand (reqTO ) {
TTOCommand.call(this,reqTO)
this.execute = function() {
if (null == this.reqTO || this.reqTO.constructor != BrandingInfoTO) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("COMMAND","requestTO is not a BrandingTO"))
return
}
TTOModel.setBrandingInfo(this.reqTO)
}
}
SetBrandingInfoCommand.prototype = new TTOCommand()
SetBrandingInfoCommand.prototype.constructor=SetBrandingInfoCommand
function BrandingInfoTO () {
this.csrc = ""
this.logoSrcURL = ""
this.partnerName = ""
this.iframeContentURL = ""
this.embeddedContentURL = ""
this.embeddedLinkURL = ""
this.showAd = true
}
InitAppCommand = TTOCommand.extend({
construct : function (reqTO ) {
this.superClass.construct.call(this,reqTO)
},
execute : function () {
if (! (this.reqTO instanceof InitTO)) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("COMMAND","requestTO is not an InitTO"))
return
}
if ('undefined' != typeof(TTOModel)) {
TTOModel.initAppData(this.reqTO);
}
TTOService.setServiceData(this.reqTO); }
});
InitTO = TTORequestTO.extend({
userId : "",
csrc : "",
prodId : "",
taxserver : "",
webserver : "",
port : "",
productData : "",
delayedAuth : false,
construct : function() {}
});
MigrateCommand = TTOCommand.extend({
construct : function (reqTO ) {
this.superClass.construct.call(this,reqTO)
},
execute : function () {
TTOService.migrate(this.handler);
}
});
var kPrintForFiling = 0;
var kPrintForRecords = 1;
var kPrintRecordsWithRecomendedWorksheets = 2;
var kPrintRecordsWithAllWorksheets = 3;
var kPrintForReview = 4;
var kPrintSelected = 5;
var kPrintSelectedWithSupportingDetails = 6;
var kPrintEFPaperwork = 7;
var kPrintActiveForm = 8;
var kPrintEFPostmark = 9;
var kTotalPrintTypes = 10;
PrintCommand = TTOCommand.extend({
construct : function (reqTO ) {
this.superClass.construct.call(this,reqTO)
},
execute : function () {
if (! (this.reqTO instanceof PrintTO)) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("COMMAND","requestTO is not an PrintTO"))
return
}
if (null == this.reqTO.printType) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("COMMAND"," PrintTO has no printType"))
return
}
var PDFUrl = TTOService.getPDFUrl(this.reqTO)
if (this.reqTO.save)
showPDFSaveDialog(PDFUrl, true)
else
showPDFViewer(PDFUrl)
},
setSuccessCB : function (CB) { },
setFailureCB : function (CB) { }
});
PrintTO = TTORequestTO.extend({
printType : "",
itemizations : false,
watermark : false,
save : false,
FASfileId : "",
filename : "TaxReturn.pdf",
formList : null,
formsetList : null,
construct : function() {
this.formList = [];
this.formsetList = [];
},
addFormToList : function (formId ) {
this.formList.push(formId)
}
});
DownloadTaxFileCommand = TTOCommand.extend({
construct : function (reqTO ) {
this.superClass.construct.call(this,reqTO)
},
execute : function () {
if (! (this.reqTO instanceof DownloadTO)) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("COMMAND","requestTO is not an DownloadTO"))
return
}
TTOService.download(this.reqTO, this.handler);
}
});
DownloadTO = TTORequestTO.extend({
filename : "taxReturn.tax",
responseFrame: null,
construct : function() {}
});
UpgradeSkuCommand = TTOCommand.extend({
construct : function (reqTO ) {
this.superClass.construct.call(this,reqTO)
this.handler = new UpgradeHandler(this);
},
execute : function () {
if (! (this.reqTO instanceof UpgradeTO)) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("COMMAND","requestTO is not an UpgradeTO"))
return
}
if (!this.reqTO.sku) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("COMMAND","UpgradeTO has invalid sku:" + reqTO.sku))
return
}
if ( this.reqTO.showWaitMsg) {
ModalWindow.setTitle("Upgrading your product")
ModalWindow.setWaitMsg("Verifying Your Upgrade...")
ModalWindow.show(document.createElement("DIV"),ModalWindow.kModal_HTMLType,null,true)
}
TTOService.upgrade(this.reqTO,this.handler);
},
setFailureCB : function (CB) {}
});
UpgradeTO = TTORequestTO.extend({
sku : 0,
skuName : "",
showWaitMsg : false,
regeneratePage : false,
construct : function() {}
});
ClearReturnCommand = TTOCommand.extend({
construct : function (reqTO ) {
this.superClass.construct.call(this,reqTO)
this.handler = new ClearReturnHandler(this)
},
execute : function () {
if (! (this.reqTO instanceof ClearReturnTO)) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("COMMAND","requestTO is not an ClearReturnTO"))
return
}
TTOService.clearReturn(this.handler, this.reqTO.skipTransfer);
}
});
ClearReturnTO = TTORequestTO.extend({
regeneratePage : false,
skipTransfer : false,
construct : function() {}
});
FormsModeCommand = TTOCommand.extend({
construct : function (reqTO ) {
this.superClass.construct.call(this,reqTO)
},
execute : function () {
if (! (this.reqTO instanceof FormsModeRequestTO)) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("COMMAND","requestTO is not an FormsModeRequestTO"))
return
}
TTOService.executeFormCommand(this.reqTO, this.handler);
}
});
FormsModeRequestTO = TTORequestTO.extend({
submitData : null,
formFieldToGet : null,
AgencyListToLoad : null,
getFormsInReturn : false,
allowHiddenForms : false,
formToAdd : null,
formToDelete : null,
construct : function() {}
});
ServletCommand = TTOCommand.extend({
construct : function (reqTO ) {
this.superClass.construct.call(this,reqTO)
},
execute : function () {
if (! (this.reqTO instanceof ServletTO)) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("COMMAND","requestTO is not an ServletTO"))
return
}
TTOService.servlet(this.reqTO, this.handler);
}
});
ServletTO = TTORequestTO.extend({
servletPath : "",
actionName : "",
data : "",
construct : function() {}
});
function SetABTestCommand (reqTO ) {
TTOCommand.call(this,reqTO)
this.execute = function() {
if (null == this.reqTO || this.reqTO.constructor != ABTestTO) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("COMMAND","requestTO is not an ABTestTO"))
return
}
TTOModel.setABTestInfo(this.reqTO.abInfo);
}
}
SetABTestCommand.prototype = new TTOCommand()
SetABTestCommand.prototype.constructor=SetABTestCommand
function ABTestTO () {
this.abInfo = ""
}
TopicJumpCommand = TTOCommand.extend({
construct : function (reqTO ) {
this.superClass.construct.call(this,reqTO)
},
execute : function () {
if (! (this.reqTO instanceof TopicJumpTO)) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("COMMAND","requestTO is not an TopicJumpTO"))
return
}
TTOService.topicJump(this.reqTO, this.handler);
}
});
TopicJumpTO = SubmitTO.extend({
topicPath : "",
construct : function() {
this.superClass.construct.call(this)
}
});
LogoutCommand = TTOCommand.extend({
construct : function (reqTO ) {
this.superClass.construct.call(this,reqTO)
},
execute : function () {
TTOService.logout(TTOModel.getAuthId(), this.handler);
}
});
CheckDelayedAuthCommand = TTOCommand.extend({
construct : function (reqTO ) {
this.superClass.construct.call(this,reqTO)
},
execute : function () {
TTOService.checkDelayedAuthUser(TTOModel.getAuthId(), this.handler);
}
});
LogErrorCommand = TTOCommand.extend({
construct : function (reqTO ) {
this.superClass.construct.call(this,reqTO)
},
execute : function () {
if (! (this.reqTO instanceof LogErrorTO)) {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("COMMAND","requestTO is not an LogErrorTO"))
return
}
if (null == this.reqTO.error || this.reqTO.error.constructor != UIError){
alert("LogErrorTO does not contain a UIError Object")
return
}
if (null == this.reqTO.error.component){
return;
}
TTOService.logError(this.reqTO.error); }
});
LogErrorTO = TTORequestTO.extend({
error : null,
construct : function() {}
});
GetLogInfoCommand = TTOCommand.extend({
construct : function (logType, dataDumpType) {
this.superClass.construct.call(this)
this._logType = logType;
this._dataDumpType= dataDumpType
var op='status=0,toolbar=0,menubar=0,location=0,directories=0,resizable=1,scrollbars=1,width=600'
var logInfoWin=window.open("","__loginfo",op);
if(!logInfoWin) return
this.handler = new GetLogInfoHandler(this, logType, logInfoWin);
},
execute : function () {
var path = this._getLogPath(this._logType, this._dataDumpType);
if (null != path){
TTOService.getLogInfo(path,this.handler);
} else {
TTOEventPubSub.publishEvent(TTOEventPubSub.kEvt_ClientError, new UIError("COMMAND","getLogInfo - couldn't get log path!"))
}
},
_logType : null,
_kPIDEventPath : "/pidevents/",
_kPIDEventTDErrorsPath : "/pidtderrors/",
_kPIDDataDumpPath : "/piddumpdata/",
_getLogPath : function (logType, dataDumpType) {
var path;
var PID = TTOModel.getPID();
if ( null != PID ){
switch(this._logType){
case GetLogInfoCommand.kPIDEventLog:
path =this. _kPIDEventPath + PID;
break;
case GetLogInfoCommand.kPIDEventTDErrors:
path = this._kPIDEventTDErrorsPath + PID;
break;
case GetLogInfoCommand.kPIDDumpDataLog:
path = this._kPIDDataDumpPath + PID + "/" + dataDumpType;
break;
}
}
return path;
}
},
{
kPIDEventLog : 0,
kPIDEventTDErrors : 1 ,
kPIDDumpDataLog : 2
});
GetTopicListCommand = TTOCommand.extend({
construct : function (reqTO ) {
this.superClass.construct.call(this, reqTO);
this.handler = new GetTopicListHandler(this);
},
execute : function() {
TTOService.getTopicList(this.handler);
}
});
